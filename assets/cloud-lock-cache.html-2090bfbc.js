import{_ as p,V as c,W as o,a0 as i,X as n,Y as s,Z as e,$ as a,G as l}from"./framework-ed4f969a.js";const u="/assets/true-image-20210913133901438-a902bcd8.png",r="/assets/true-image-20210913134831345-f3723938.png",d="/assets/true-img2-cac41ac7.png",k="/assets/true-image-20210913181008801-c000e07a.png",v="/assets/true-img3-b967e642.png",m="/assets/true-image-20210604132125942-8bebfa80.png",g="/assets/true-image-20210913135023032-e13b9cd8.png",b="/assets/true-image-20210913140426623-9f6d00b2.png",h="/assets/true-image-20210914112220313-015ded10.png",f="/assets/true-image-20210914112316601-d76169a5.png",y="/assets/true-image-20210914111013514-49f95c6c.png",_="/assets/true-image-20210914121035642-2be78af3.png",x="/assets/true-image-20210916165158731-5aea5b4a.png",q="/assets/true-image-20210914143530694-c0ca04a9.png",w="/assets/true-image-20210916170348140-ef8f48f3.png",S="/assets/true-image-20210916165641334-82d56ce6.png",C="/assets/true-image-20210916180627709-e269b54d.png",L="/assets/true-image-20210916171603888-ed8ddad5.png",R="/assets/true-image-20210916180857200-1de9f2d2.png",J="/assets/true-image-20210916173657735-527784f2.png",j="/assets/true-image-20210916173725146-0b5c3c49.png",D="/assets/true-image-20210918141244867-29c604f0.png",T="/assets/true-image-20210918150228793-3929abde.png",E="/assets/true-image-20210918150700034-898da065.png",I="/assets/true-image-20210918151901864-c78f957e.png",U="/assets/true-image-20210918152351597-d2afd539.png",B={},M=a(`<h1>缓存一致性</h1><ol><li>双写模式：写数据库，写缓存</li><li>失效模式：缓存失效（删除缓存），写数据库</li></ol><blockquote><p>读取缓存步骤数据一致性一般没有什么问题，但是一旦涉及到数据更新：数据库和缓存更新，就容易出现<strong>缓存(Redis)和数据库（MySQL）间的数据一致性问题</strong>。</p><p>不管先保存到MySQL，还是先保存到Redis都面临着一个保存成功而另外一个保存失败的情况。</p><p>不管是先写MySQL数据库，再删除Redis缓存；还是先删除缓存，再写库，都有可能出现数据不一致的情况。举一个例子：</p><p>1.如果删除了缓存Redis，还没有来得及写库MySQL，另一个线程就来读取，发现缓存为空，则去数据库中读取数据写入缓存，此时缓存中为脏数据。</p><p>2.如果先写了库，在删除缓存前，写库的线程宕机了，没有删除掉缓存，则也会出现数据不一致情况。</p><p>因为写和读是并发的，没法保证顺序,就会出现缓存和数据库的数据不一致的问题。</p></blockquote><h2 id="解决" tabindex="-1"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> 解决：</h2><h3 id="_1-基于mysql的binlog日志-canal" tabindex="-1"><a class="header-anchor" href="#_1-基于mysql的binlog日志-canal" aria-hidden="true">#</a> 1 基于mysql的binlog日志（canal）</h3><h3 id="_2-消息队列mq" tabindex="-1"><a class="header-anchor" href="#_2-消息队列mq" aria-hidden="true">#</a> 2 消息队列MQ</h3><h1>1、本地缓存&amp;分布式缓存</h1><h2 id="_1-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-1-使用场景" aria-hidden="true">#</a> 1.1 使用场景：</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>即时性（物流状态信息，更新慢）；
数据一致性不高的（导航菜单数据、比较固定的数据）；
访问量大且更新频率不高的数据（读多、写少）；

<span class="token comment">#举例: 电商类应用，商品分类，商品列表等适合缓存并加一个失效时间(根据数据更新频率来定)，后台如果发布一一个商品，买家需要5分钟才能看到新的商品般还是可以接受的。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-2-使用流程" tabindex="-1"><a class="header-anchor" href="#_1-2-使用流程" aria-hidden="true">#</a> 1.2 使用流程：</h2><p><img src="`+u+`" alt=""></p><h2 id="_1-3-简单实例格式" tabindex="-1"><a class="header-anchor" href="#_1-3-简单实例格式" aria-hidden="true">#</a> 1.3 简单实例格式：</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>data <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从缓存加载数据</span>
<span class="token function">lf</span><span class="token punctuation">(</span>data <span class="token operator">==</span> nul<span class="token punctuation">)</span><span class="token punctuation">{</span>
	data <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从数据库加载数据</span>
	cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保存到cache中，添加过期时间</span>
<span class="token punctuation">}</span>
retum data<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-4-本地缓存" tabindex="-1"><a class="header-anchor" href="#_1-4-本地缓存" aria-hidden="true">#</a> 1.4 本地缓存</h2><p>Map&lt;String,Object&gt;：在多分布式部署实例时会存在：各自使用自己的本地缓存</p><p><img src="`+r+'" alt=""></p><p>​ 解决办法：分布式缓存</p><h2 id="_1-5-分布式缓存" tabindex="-1"><a class="header-anchor" href="#_1-5-分布式缓存" aria-hidden="true">#</a> 1.5 分布式缓存</h2><h3 id="_1-5-1-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_1-5-1-缓存穿透" aria-hidden="true">#</a> 1.5.1 缓存穿透 <a name="缓存穿透"></a></h3><p><img src="'+d+'" alt=""></p><p><img src="'+k+'" alt=""></p><blockquote><p>（[缓存、DB]都不存在数据）1000万条并发请求，缓存为null，全部跑到db查询，db可能直接宕机。</p></blockquote><h3 id="_1-5-2-缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_1-5-2-缓存雪崩" aria-hidden="true">#</a> 1.5.2 缓存雪崩 <a name="缓存雪崩"></a></h3><p><img src="'+v+'" alt=""></p><blockquote><p>存在的数据，大面积数据同时失效)已经有很多数据存在，但有一些设置了同样的过期时间，导致了很多没命中。</p></blockquote><h3 id="_1-5-3-缓存击穿" tabindex="-1"><a class="header-anchor" href="#_1-5-3-缓存击穿" aria-hidden="true">#</a> 1.5.3 缓存击穿 <a name="缓存击穿"></a></h3><p><img src="'+m+'" alt=""></p><blockquote><p>（存在的数据，某一个数据热点失效）1000万条并发，，会全部跑到db查询，db可能直接宕机。</p></blockquote><h3 id="_1-5-4-缓存穿透、击穿、雪崩的区别" tabindex="-1"><a class="header-anchor" href="#_1-5-4-缓存穿透、击穿、雪崩的区别" aria-hidden="true">#</a> 1.5.4 缓存穿透、击穿、雪崩的区别：</h3><h4 id="_1-穿透是缓存不命中-db也没有不命中" tabindex="-1"><a class="header-anchor" href="#_1-穿透是缓存不命中-db也没有不命中" aria-hidden="true">#</a> 1.穿透是缓存不命中，DB也没有不命中</h4><h4 id="_2-击穿是一个热点key失效" tabindex="-1"><a class="header-anchor" href="#_2-击穿是一个热点key失效" aria-hidden="true">#</a> 2.击穿是一个热点key失效</h4><h4 id="_3-雪崩是很多key集体失效" tabindex="-1"><a class="header-anchor" href="#_3-雪崩是很多key集体失效" aria-hidden="true">#</a> 3.雪崩是很多key集体失效</h4><h2 id="_1-6-总结" tabindex="-1"><a class="header-anchor" href="#_1-6-总结" aria-hidden="true">#</a> 1.6 总结</h2><h3 id="_1-6-1、解决缓存穿透-空结果缓存" tabindex="-1"><a class="header-anchor" href="#_1-6-1、解决缓存穿透-空结果缓存" aria-hidden="true">#</a> 1.6.1、<strong>解决缓存穿透：空结果缓存</strong></h3><blockquote><p>.set(&quot;cataLogJson&quot;, cataLogJsonDB == null ? &quot;1001&quot; : cataLogJsonDB));</p></blockquote><h3 id="_1-6-2、解决缓存雪崩-设置过期时间-加随机值-。存在的数据-大面积数据同时失效" tabindex="-1"><a class="header-anchor" href="#_1-6-2、解决缓存雪崩-设置过期时间-加随机值-。存在的数据-大面积数据同时失效" aria-hidden="true">#</a> 1.6.2、<strong>解决缓存雪崩：设置过期时间(加随机值) 。存在的数据，大面积数据同时失效</strong></h3><blockquote><p>.set(&quot;cataLogJson&quot;, JSON.toJSONString(cataLogJsonFromDB == null ? &quot;1001&quot; : cataLogJsonFromDB), 1, TimeUnit.DAYS);</p></blockquote><h3 id="_1-6-3、解决缓存击穿【难点】-加锁-存在的数据-某一个数据热点失效" tabindex="-1"><a class="header-anchor" href="#_1-6-3、解决缓存击穿【难点】-加锁-存在的数据-某一个数据热点失效" aria-hidden="true">#</a> 1.6.3、<strong>解决缓存击穿【难点】：加锁，存在的数据，某一个数据热点失效</strong></h3><blockquote><p>通过redis ...</p></blockquote><p><img src="'+g+'" alt=""></p><h1>2、分布式锁+redis 配置</h1><p><img src="'+b+'" alt=""></p>',42),V={href:"https://blog.csdn.net/qq_42476834/article/details/125108089",target:"_blank",rel:"noopener noreferrer"},F=a(`<h2 id="_2-1-业务测试" tabindex="-1"><a class="header-anchor" href="#_2-1-业务测试" aria-hidden="true">#</a> 2.1 业务测试</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catalog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCataLogJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取缓存数据</span>
    <span class="token class-name">String</span> cataLogJson <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;cataLogJson&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cataLogJson<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//无缓存</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catalog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> cataLogJsonFromDB <span class="token operator">=</span> <span class="token function">getCataLogJsonFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//json化存储</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;cataLogJson&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>cataLogJsonFromDB<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> cataLogJsonFromDB<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//有缓存，将json数据转化为对象</span>
    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>cataLogJson<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catalog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),P={href:"http://yumall.com/",target:"_blank",rel:"noopener noreferrer"},N=a(`<p>无缓存--时间：40</p><p>有缓存-----时间：1</p><h2 id="_2-2-压力测试与bug解决" tabindex="-1"><a class="header-anchor" href="#_2-2-压力测试与bug解决" aria-hidden="true">#</a> 2.2 压力测试与bug解决</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>//TODO产生堆外内存溢出:
OutOfDirectMemoryError
//1)、springboot2 . e以后默认使用lettuce作为操作redis的客户端。它使用netty进行网络通信。
//2)、lettuce的bug导致netty堆外内存溢出-Xmx300m; netty如果没有指定堆外内存，默认使用-Xmx300m
//可以通过 -Dio. netty . maxDirectMemory进行设置
//解决方案:不能使用-Dio. netty. maxDirec tMemory只去调大堆外内存。
//1)、升级Lettuce客户端。2) 、切换使用jedis
//redisTemplate:
//lettuce、jedis操作redis的底层客户端。Spring再次封装redis Template;

		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-加锁解决缓存击穿" tabindex="-1"><a class="header-anchor" href="#_2-3-加锁解决缓存击穿" aria-hidden="true">#</a> 2.3 加锁解决<code>缓存击穿</code></h2><p>单体：本地锁在分布式</p><p>//只要是同一把锁，就能锁住需要这个锁的所有线程 //1、synchronized (this): SpringBoot所有的组件在容器中都是单例的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">getCataLogJsonFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> 
 <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//单体架构是没问题的，分布式就不行了</span>
     <span class="token class-name">String</span> cataLogJson <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;cataLogJson&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cataLogJson<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>cataLogJson<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catalog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;synchronized---查询了数据库&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
     <span class="token comment">//之前业务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模拟并发80：<em>没有锁住</em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>..........无缓存，..........无缓存，..........无缓存，..........无缓存，..........无缓存，..........无缓存
synchronized---查询了数据库
synchronized---查询了数据库
..........无缓存，..........无缓存，..........无缓存，... ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+h+'" alt="image-20210914112220313" style="zoom:80%;"><p>解决：</p><img src="'+f+`" alt="image-20210914112316601" style="zoom:80%;"><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">return</span> getCataLogJsonFromDB之前加入缓存：
    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;cataLogJson&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>collect1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;101&quot;</span> <span class="token operator">:</span> collect1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">AUTOSECONDS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> collect1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试80结果：查询数据库放入缓存</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>..........无缓存
..........无缓存
..........无缓存
..........无缓存
..........无缓存
synchronized---查询了数据库
..........无缓存
..........无缓存
有缓存........
有缓存........
有缓存........
有缓存........
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-本地锁在分布式服务" tabindex="-1"><a class="header-anchor" href="#_2-4-本地锁在分布式服务" aria-hidden="true">#</a> 2.4 本地锁在分布式服务</h2><p>模拟多台服务器的商品服务，端口不一: --server.port=8101, 8102, 8103</p><p>发现：本地锁将只是对与本实例起作用。</p><p>解决：分布式锁</p><h2 id="_2-5-分布式锁原理-使用" tabindex="-1"><a class="header-anchor" href="#_2-5-分布式锁原理-使用" aria-hidden="true">#</a> 2.5 分布式锁原理&amp;使用</h2><p><img src="`+y+'" alt=""></p><p><img src="'+_+'" alt=""></p><h3 id="_2-5-1-redis锁" tabindex="-1"><a class="header-anchor" href="#_2-5-1-redis锁" aria-hidden="true">#</a> 2.5.1 redis锁</h3>',24),O={href:"http://redis.cn/commands.html",target:"_blank",rel:"noopener noreferrer"},z=a(`<p>SET命令 [key value]</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>    EX seconds – 设置指定的过期时间，以秒为单位
    PX 毫秒 – 设置指定的过期时间，以毫秒为单位。 
    NX –仅在密钥不存在时才设置密钥。 
    XX – 仅设置已存在的密钥。 
    EX seconds – 设置键key的过期时间，单位时秒
    PX milliseconds – 设置键key的过期时间，单位时毫秒
    NX – 只有键key不存在的时候才会设置key的值
    XX – 只有键key存在的时候才会设置key的值
<span class="token builtin class-name">set</span> lock haha NX 
<span class="token builtin class-name">set</span> lock haha XX 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-2-简单的业务-分析" tabindex="-1"><a class="header-anchor" href="#_2-5-2-简单的业务-分析" aria-hidden="true">#</a> 2.5.2 简单的业务+分析</h3><h4 id="a、测试问题1-setnx占好了位-业务代码异常或者程序在页面过程中宕机。没有执行删除锁逻辑-这就造成了死锁。" tabindex="-1"><a class="header-anchor" href="#a、测试问题1-setnx占好了位-业务代码异常或者程序在页面过程中宕机。没有执行删除锁逻辑-这就造成了死锁。" aria-hidden="true">#</a> A、测试问题1：setnx占好了位，业务代码异常或者程序在页面过程中宕机。没有执行删除锁逻辑，这就造成了死锁。</h4><p><img src="`+x+'" alt=""></p><img src="'+q+'" alt="image-20210914143530694" style="zoom:100%;"><h5>- - 解决: 设置锁的自动过期，即使没有删除，会自动删除</h5><hr><h4 id="b、测试问题2-setnx设置好-正要去设置过期时间-宕机。又死锁了。" tabindex="-1"><a class="header-anchor" href="#b、测试问题2-setnx设置好-正要去设置过期时间-宕机。又死锁了。" aria-hidden="true">#</a> B、测试问题2：setnx设置好， 正要去设置过期时间，宕机。又死锁了。</h4><p><img src="'+w+'" alt=""></p><p><img src="'+S+'" alt=""></p><h5>- - 解决: 设置过期时间和占位必须是原子的。redis支持使用setnx ex命令</h5><hr><h4 id="c、测试问题3-加锁原子型-删除锁直接删除-如果由于业务时间很长-超时-锁自己过期了-我们直接删除-有可能把别人正在持有的锁删除了。" tabindex="-1"><a class="header-anchor" href="#c、测试问题3-加锁原子型-删除锁直接删除-如果由于业务时间很长-超时-锁自己过期了-我们直接删除-有可能把别人正在持有的锁删除了。" aria-hidden="true">#</a> C、测试问题3（加锁原子型）：删除锁直接删除？？? 如果由于业务时间很长（<em>超时</em>），锁自己过期了，我们直接删除，有可能把别人正在持有的锁删除了。</h4><p><img src="'+C+'" alt=""></p><p><img src="'+L+'" alt=""></p><h5>- - 解决: 占锁的时候，值指定为uuid,每个人匹配是自己的锁才删除。</h5><hr><h4 id="d、-测试问题4-占锁时指定为uuid-每个人匹配是自己的锁才删除。如果正好判断是当前值-正要删除锁的时候-锁已经过期了-别人已经设置到了新的值-那么我们删除的就是别人的锁了" tabindex="-1"><a class="header-anchor" href="#d、-测试问题4-占锁时指定为uuid-每个人匹配是自己的锁才删除。如果正好判断是当前值-正要删除锁的时候-锁已经过期了-别人已经设置到了新的值-那么我们删除的就是别人的锁了" aria-hidden="true">#</a> D、 测试问题4：占锁时指定为uuid,每个人匹配是自己的锁才删除。如果正好判断是当前值，正要删除锁的时候，锁已经过期了，别人已经设置到了新的值，那么我们删除的就是别人的锁了</h4><p><img src="'+R+'" alt=""></p><p><img src="'+J+'" alt=""></p><h5>- - 解决: lua脚本解锁</h5><hr><h4 id="e、-测试问题5-lua脚本解锁-最终形态" tabindex="-1"><a class="header-anchor" href="#e、-测试问题5-lua脚本解锁-最终形态" aria-hidden="true">#</a> E、 测试问题5：lua脚本解锁（最终形态）</h4><p><img src="'+j+`" alt=""></p><h2 id="_2-6-完整业务实例" tabindex="-1"><a class="header-anchor" href="#_2-6-完整业务实例" aria-hidden="true">#</a> 2.6 完整业务实例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catalog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCataLogJson2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取缓存数据</span>
        <span class="token class-name">String</span> cataLogJson <span class="token operator">=</span> <span class="token class-name">RedisUtils<span class="token punctuation">.</span>String2</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;cataLogJson&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cataLogJson<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//无缓存</span>
            <span class="token keyword">return</span> <span class="token function">getCataLogJsonFromRedisLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catalog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCataLogJsonFromRedisLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> <span class="token class-name">RedisUtils<span class="token punctuation">.</span>String2</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//System.out.println(&quot;获取分布式锁--成功&quot;);</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catalog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> cataLogJsonFromDB <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">//加锁成功... 执行业务</span>
                cataLogJsonFromDB <span class="token operator">=</span> <span class="token function">getCataLogJsonFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">//获取值对比+对比成功删除=原子操作,lua脚本解锁</span>
                <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">&quot;if redis.call(&#39;get&#39;,KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;,KEYS[1]) else return 0 end&quot;</span><span class="token punctuation">;</span>
                <span class="token class-name">Long</span> lock1 <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> cataLogJsonFromDB<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;获取分布式锁------失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//加锁失败,休眠一下6s，继续调用</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token function">getCataLogJsonFromRedisLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="发现加锁与解锁重复-把他提出来到工具类-但分布式框架有成型产品《redisson-整合》" tabindex="-1"><a class="header-anchor" href="#发现加锁与解锁重复-把他提出来到工具类-但分布式框架有成型产品《redisson-整合》" aria-hidden="true">#</a> <strong>发现加锁与解锁重复，把他提出来到工具类，但分布式框架有成型产品《RedisSon 整合》</strong></h2><h1>3、分布式锁 RedisSon</h1>`,29),X={href:"https://redis.io/topics/distlock",target:"_blank",rel:"noopener noreferrer"},A=a(`<h2 id="_3-1-redisson-整合" tabindex="-1"><a class="header-anchor" href="#_3-1-redisson-整合" aria-hidden="true">#</a> 3.1. RedisSon 整合</h2><h3 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> - - 依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> - - 配置</h3>`,4),G={href:"https://github.com/redisson/redisson/wiki",target:"_blank",rel:"noopener noreferrer"},K=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * destroyMethod = close/shutdown
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">&quot;shutdown&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">RedissonClient</span> <span class="token function">redisSon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 默认连接地址 127.0.0.1:6379</span>
    <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://127.0.0.1:6379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RedissonClient</span> redisson <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> redisson<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> - - 测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RedissonClient</span> redissonClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redissonClient<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//org.redisson.Redisson@7037a680</span>
<span class="token punctuation">}</span>


异常：<span class="token class-name">Redis</span> url should start <span class="token keyword">with</span> <span class="token namespace">redis</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span> or rediss<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">for</span> <span class="token class-name">SSL</span> connection<span class="token punctuation">)</span>
解决：config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://127.0.0.1:6379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-redisson-lock-锁测试" tabindex="-1"><a class="header-anchor" href="#_3-2-redisson-lock-锁测试" aria-hidden="true">#</a> 3.2. RedisSon-lock 锁测试</h2><h3 id="简单测试" tabindex="-1"><a class="header-anchor" href="#简单测试" aria-hidden="true">#</a> - - 简单测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//1、获取一把锁，只要锁的名字一样，就是同一把锁</span>
        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">&quot;my-lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
        2、加锁、阻塞式等待，默认30s
        锁的自动续期，如果业务超长，运行期间自动给锁续上新的30s。不用担心业务时间长，锁自动过期被删掉。
        2)、加锁的业务只要运行完成，就不会给当前锁续期，即使不手动解锁，锁默认在30s以后自动删除。
        */</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;加锁完成，业务处理中.......&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;释放锁...&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lock特点" tabindex="-1"><a class="header-anchor" href="#lock特点" aria-hidden="true">#</a> lock特点：</h3><p>加锁、阻塞式等待。 锁的自动续期，如果业务超长，运行期间自动给锁续上新的30s。不用担心业务时间长，锁自动过期被删掉。 加锁的业务只要运行完成，就不会给当前锁续期，即使不手动解锁，锁默认在30s以后自动删除。</p><h2 id="_3-3-redisson-lock-看门狗原理" tabindex="-1"><a class="header-anchor" href="#_3-3-redisson-lock-看门狗原理" aria-hidden="true">#</a> 3.3. RedisSon-lock 看门狗原理</h2><h2 id="_3-4-redisson-读写锁-readwritelock" tabindex="-1"><a class="header-anchor" href="#_3-4-redisson-读写锁-readwritelock" aria-hidden="true">#</a> 3.4. RedisSon 读写锁 ReadWriteLock</h2><h3 id="测试-1" tabindex="-1"><a class="header-anchor" href="#测试-1" aria-hidden="true">#</a> - - 测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 保证一定能读到最新数据,修改期间，写锁是-个排他锁(互斥锁)。读锁是一个共享锁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 写锁没释放读就必须等待
 *
 * <span class="token keyword">@return</span> uuid
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/write&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">writeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RReadWriteLock</span> lock <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReadWriteLock</span><span class="token punctuation">(</span><span class="token string">&quot;rw-lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">RLock</span> rLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//1、改数据加写锁，读数据加读锁</span>
        rLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;写锁--加锁成功... &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RedisUtils<span class="token punctuation">.</span>String2</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;writeValue&quot;</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        rLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;写锁--释放&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> uuid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/read&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RReadWriteLock</span> lock <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReadWriteLock</span><span class="token punctuation">(</span><span class="token string">&quot;rw-lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">RLock</span> rLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//1、改数据加写锁，读数据加读锁</span>
        rLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读锁--加锁成功... &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RedisUtils<span class="token punctuation">.</span>String2</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;writeValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        rLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读锁--释放&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> uuid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> - - 结论</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>* 保证一定能读到最新数据，修改期间，写锁是一个排他锁 (互斥锁、独享锁)。读锁是一个共享锁
* 写锁没释放读就必须等待
* 读+读:相当于无锁，并发读，只会在redis中记录好， 所有当前的读锁。他们都会同时加锁成功
* 写+读:等待写锁释放
* 写+写:-阻塞方式
* 读+写:有读锁。写也需要等待。
* 只要有写的存在，都必须等待.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+D+`" alt=""></p><h2 id="_3-5-redisson-闭锁countdownlatch-测试" tabindex="-1"><a class="header-anchor" href="#_3-5-redisson-闭锁countdownlatch-测试" aria-hidden="true">#</a> 3.5. RedisSon 闭锁CountDownLatch 测试</h2><h3 id="放假-锁门-测试" tabindex="-1"><a class="header-anchor" href="#放假-锁门-测试" aria-hidden="true">#</a> - - 放假，锁门 测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 闭锁CountDownLatch
 *
 * <span class="token keyword">@return</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/lockDoor&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">lockDoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">RCountDownLatch</span> door <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCountDownLatch</span><span class="token punctuation">(</span><span class="token string">&quot;door&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    door<span class="token punctuation">.</span><span class="token function">trySetCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    door<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等待闭锁都完成</span>
    <span class="token keyword">return</span> <span class="token string">&quot;放假了...&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/gogo/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">gogo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RCountDownLatch</span> door <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCountDownLatch</span><span class="token punctuation">(</span><span class="token string">&quot;door&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    door<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计数减- -;|</span>
    <span class="token keyword">return</span> id <span class="token operator">+</span> <span class="token string">&quot; 班的人都走了...&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结论-1" tabindex="-1"><a class="header-anchor" href="#结论-1" aria-hidden="true">#</a> - - 结论</h3><p>等待某一事物处理全部业务完成后，在执行某操作</p><h2 id="_3-6-redisson-信号量semaphore-测试" tabindex="-1"><a class="header-anchor" href="#_3-6-redisson-信号量semaphore-测试" aria-hidden="true">#</a> 3.6. RedisSon 信号量Semaphore 测试</h2><h3 id="车库停车测试" tabindex="-1"><a class="header-anchor" href="#车库停车测试" aria-hidden="true">#</a> - - 车库停车测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 进车库停车：A口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 车位数-1，获取1个信号，获取1个值,占1个车位.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 信号量也可以用作分布式限流;
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/park&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">RSemaphore</span> park <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSemaphore</span><span class="token punctuation">(</span><span class="token string">&quot;park&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    park<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取1个信号，获取1个值,占1个车位</span>
    <span class="token keyword">boolean</span> b <span class="token operator">=</span> park<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//执行业务</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;ok=&gt;&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 出车库：A口<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 释放1个车位，车位总量+1
 *
 * <span class="token keyword">@return</span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/go&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">RSemaphore</span> park <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSemaphore</span><span class="token punctuation">(</span><span class="token string">&quot;park&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    park<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放- -个车位</span>
    <span class="token keyword">return</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-7-redisson-缓存一致性解决" tabindex="-1"><a class="header-anchor" href="#_3-7-redisson-缓存一致性解决" aria-hidden="true">#</a> 3.7. RedisSon 缓存一致性解决</h2><h3 id="原理-双写模式、失效模式" tabindex="-1"><a class="header-anchor" href="#原理-双写模式、失效模式" aria-hidden="true">#</a> - - 原理：双写模式、失效模式</h3><p><img src="`+T+'" alt=""></p><p><img src="'+E+`" alt=""></p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> - - 解决方案</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>●无论是双写模式还是失效模式，都会导致缓存的不一致问题。即多个实例同时更新会出事。怎么办?
    ●1、如果是用户纬度数据<span class="token punctuation">(</span>订单数据、用户数据<span class="token punctuation">)</span>，这种并发几率非常小，不用考虑这个问题，缓存数据加上过期时间，每隔一段时间触发读的主动更新即可
    ●2、如果是菜单，商品介绍等基础数据，也可以去使用 canal 订阅 binlog 的方式。
    ●3、缓存数据+过期时间也足够解决大部分业务对于缓存的要求。
    ●4、通过加锁保证并发读写，写写的时候按顺序排好队。读读无所谓。所以适合使用读写锁。 <span class="token punctuation">(</span>业务不关心脏数据，允许临时脏数据可忽略<span class="token punctuation">)</span>.

●总结:
    ●我们能放入缓存的数据本就不应该是实时性、-致性要求超高的。所以缓存数据的时候加上过期时间，保证每天拿到当前最新数据即可。
    ●我们不应该过度设计，增加系统的复杂性
    ●遇到实时性、一致性要求高的数据，就应该查数据库，即使慢点。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="canal" tabindex="-1"><a class="header-anchor" href="#canal" aria-hidden="true">#</a> - - Canal</h3><p><img src="`+I+`" alt=""></p><h3 id="使用失效模式" tabindex="-1"><a class="header-anchor" href="#使用失效模式" aria-hidden="true">#</a> - - 使用失效模式</h3><p>我们系统的一致性解决方案: 1、 缓存的所有数据都有过期时间，数据过期下一次查询触发主动更新 2、读写数据的时候，加上分布式的读写锁。 经常写，经常读</p><p>使用SpringCache</p><h2 id="redissonlock完整业务实例" tabindex="-1"><a class="header-anchor" href="#redissonlock完整业务实例" aria-hidden="true">#</a> RedissonLock完整业务实例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catalog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCataLogJson2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取缓存数据</span>
        <span class="token class-name">String</span> cataLogJson <span class="token operator">=</span> <span class="token class-name">RedisUtils<span class="token punctuation">.</span>String2</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;cataLogJson&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cataLogJson<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//System.out.println(&quot;..........无缓存&quot;);</span>
            <span class="token comment">//无缓存</span>
            <span class="token keyword">return</span> <span class="token function">getCataLogJsonFromRedissonLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//System.out.println(&quot;有缓存........&quot;);</span>
        <span class="token comment">//有缓存，将json数据转化为对象</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>cataLogJson<span class="token punctuation">,</span> 。<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catalog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCataLogJsonFromRedissonLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//        System.out.println(&quot;获取分布式锁--成功&quot;);</span>
    <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token class-name">RedisUtils</span><span class="token punctuation">.</span><span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">&quot;cataLogJson-lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catalog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> cataLogJsonFromDB <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cataLogJsonFromDB <span class="token operator">=</span> <span class="token function">getCataLogJsonFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//具体业务</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cataLogJsonFromDB<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>4、SpringCache</h1><p><img src="`+U+`" alt=""></p><h2 id="_4-1-整合" tabindex="-1"><a class="header-anchor" href="#_4-1-整合" aria-hidden="true">#</a> 4.1. 整合</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">8</span>、整合SpringCache简化缓存开发
    <span class="token number">1</span><span class="token punctuation">)</span>、引入依赖
    	spring-boot-starter-cache、spring-boot-starter-data-redis
    <span class="token number">2</span><span class="token punctuation">)</span>、写配置
        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>、自动配置了哪些
            CacheAuroConfiguration会导入RedisCacheConfiguration<span class="token punctuation">;</span>
            自动配好了缓存管理器RedisCacheManager
        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>、配置使用redis作为缓存
        	<span class="token assign-left variable">spring.cache.type</span><span class="token operator">=</span>redis <span class="token comment">#spring.cache.cache-names=qq</span>
    <span class="token number">3</span><span class="token punctuation">)</span>、测试使用缓存
        @Cacheable: Triggers cache population.触发缓存填充
        @CacheEvict: Triggers cache eviction.触发缓存驱逐,失效模式使用
        @CachePut: Updates the cache without interfering with the method execution.在不干扰方法执行的情况下更新缓存，双写模式使用
        @Caching: Regroups multiple cache operations to be applied on a method.重新组合要应用于方法的多个缓存操作。
        @CacheConfig: Shares some common cache-related settings at class-level.在类级别共享一些常见的缓存相关设置。
        
		<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>、开启缓存：启动类 @EnableCaching、方法 @Cacheable<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;category&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
			Cacheable代表当前方法的结果需要缓存，如果缓存中有，方法不用调用。如果缓存中没有，会调用方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-cacheable细节设置" tabindex="-1"><a class="header-anchor" href="#_4-2-cacheable细节设置" aria-hidden="true">#</a> 4.2. @Cacheable细节设置</h2><p>@Cacheable(value=&quot;myCache&quot;)，代表当前方法的结果需要缓存，如果缓存中有，方法不用调用。如果缓存中没有，会调用方法。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>*  -- key 默认自动生成，缓存名字::SimpleKey []
*  --value 默认使用jdk序列化机制
*  -- -1 数据持久化，
所以：使用自定义缓存设置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-自定义缓存设置" tabindex="-1"><a class="header-anchor" href="#_4-3-自定义缓存设置" aria-hidden="true">#</a> 4.3. 自定义缓存设置</h2><p>指定：key，时间，json化</p><p>key，时间:配置文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Cacheable(value = {&quot;category&quot;}, key = &quot;&#39;level1Categorys&#39;&quot;)
@Cacheable(value = {&quot;category&quot;}, key = &quot;#root.method.name&quot;)
#1小时
spring.cache.redis.time-to-live=3600000
#spring.cache.redis.key-prefix=CACHE_
spring.cache.redis.use-key-prefix=true
#存储null值，解决缓存穿透问题
spring.cache.redis.cache-null-values=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>json化+配置文件时间失效</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCacheConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisCacheConfiguration</span> <span class="token function">redisCacheConfiguration</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        config = config.entryTtl();</span>
        <span class="token comment">//将配置文件中的所有配置都生效</span>
        <span class="token class-name">CacheProperties<span class="token punctuation">.</span>Redis</span> redisProperties <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">prefixKeysWith</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isCacheNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isUseKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> config<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-4-cacheevict-caching-失效模式使用" tabindex="-1"><a class="header-anchor" href="#_4-4-cacheevict-caching-失效模式使用" aria-hidden="true">#</a> 4.4. @CacheEvict+Caching 失效模式使用</h2><p>@CachEvict 的作用 主要针对方法配置，能够根据一定的条件对缓存进行清空。</p><h3 id="_4-4-1-删除一个" tabindex="-1"><a class="header-anchor" href="#_4-4-1-删除一个" aria-hidden="true">#</a> 4.4.1 删除一个</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@CacheEvict(value = {&quot;category&quot;}, key = &quot;&#39;getLevel1Categorys&#39;&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-4-2-删除多个" tabindex="-1"><a class="header-anchor" href="#_4-4-2-删除多个" aria-hidden="true">#</a> 4.4.2 删除多个</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Caching(evict = {
        @CacheEvict(value = {&quot;category&quot;}, key = &quot;&#39;getLevel1Categorys&#39;&quot;),
        @CacheEvict(value = {&quot;category&quot;}, key = &quot;&#39;getCataLogJson&#39;&quot;),
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@CacheEvict(value = {&quot;category&quot;}, allEntries = true)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-5-cacheput-双写模式使用" tabindex="-1"><a class="header-anchor" href="#_4-5-cacheput-双写模式使用" aria-hidden="true">#</a> 4.5. @CachePut 双写模式使用</h2><h2 id="_4-6-原理与不足" tabindex="-1"><a class="header-anchor" href="#_4-6-原理与不足" aria-hidden="true">#</a> 4.6. 原理与不足</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Spring-Cache的不足;
    1)、读模式:
    	缓存穿透:查询一个null数据。解决:缓存空数据，redis.cache-null-values=true
        缓存击穿:大量并发进来同时查询-个正好过期的数据。解决:加锁; 默认是无锁的，sync=true（加锁，解决缓存击穿）
        缓存雪崩:大量的key同时过期。解决:加随机时间。加上过期时间。spring.cache.redis.time-to-live=3600000
    2)、写模式: (缓存与数据库-致)
        1)、读写加锁。
        2)、引入Canal,感知到MySQL的更新去更新数据库
        3)、读多写多，直接去数据库查询就行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-7-总结" tabindex="-1"><a class="header-anchor" href="#_4-7-总结" aria-hidden="true">#</a> 4.7. 总结</h2><p><strong>常规数据</strong>：(读多写少，即时性，-致性要求不高的数据) ;完全可以使用Spring-Cache，写模式(只要缓存的数据有过期时间就足够了 <strong>特殊数据</strong>：特殊设计</p>`,61);function W(Q,Y){const t=l("ExternalLinkIcon");return c(),o("div",null,[i(" more "),M,n("p",null,[s("博客地址："),n("a",V,[s("https://blog.csdn.net/qq_42476834/article/details/125108089"),e(t)])]),F,n("p",null,[s("测试："),n("a",P,[s("http://yumall.com/"),e(t)])]),N,n("p",null,[s("文档："),n("a",O,[s("http://redis.cn/commands.html"),e(t)])]),z,n("p",null,[n("a",X,[s("https://redis.io/topics/distlock"),e(t)])]),A,n("p",null,[s("文档："),n("a",G,[s("https://github.com/redisson/redisson/wiki"),e(t)])]),K])}const Z=p(B,[["render",W],["__file","cloud-lock-cache.html.vue"]]);export{Z as default};
