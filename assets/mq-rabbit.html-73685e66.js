import{_ as p,V as o,W as c,a0 as i,X as n,Y as s,Z as t,$ as e,G as l}from"./framework-ed4f969a.js";const u="/assets/true-image-20210929160654938-6e3ef2bb.png",r="/assets/true-image-20210929164609552-26d053aa.png",k="/assets/true-image-20210929164752957-c48923ce.png",d="/assets/true-image-20210929165249146-376079f3.png",m="/assets/true-image-20210929165322771-11136a69.png",v="/assets/true-image-20210929165442845-94281457.png",b="/assets/true-image-20210929165639595-c3a655f0.png",g="/assets/true-image-20210929170325141-ff31262a.png",h="/assets/true-image-20210929170338550-ffd73007.png",f="/assets/true-image-20210929170625945-606abca7.png",y="/assets/true-image-20210929171451906-1612edde.png",q="/assets/true-image-20210929171917453-1b01ec53.png",w="/assets/true-image-20210929171218145-d83f43b2.png",_="/assets/true-image-20210929172547787-5b023228.png",x="/assets/true-image-20210929172613924-0082d380.png",R="/assets/true-image-20210929172902177-eae54cda.png",E="/assets/true-image-20210929175249961-610d69dc.png",M="/assets/true-image-20210929175407953-4c1325fd.png",j="/assets/true-image-20210929180258342-a07d6b58.png",T="/assets/true-image-20210929181324171-dbf59986.png",C="/assets/true-image-20210929181347034-3425536e.png",Q="/assets/true-image-20210929181503450-5cc4e04d.png",S="/assets/true-image-20210929181618065-8f0ed3a9.png",D="/assets/true-image-20211003221447339-bff0bd84.png",B="/assets/true-image-20211003222246765-290126a1.png",O="/assets/true-image-20211003234548905-cd9979d6.png",A="/assets/true-image-20211003233121163-976d8312.png",I="/assets/true-image-20211011180618706-883d3985.png",U="/assets/true-image-20211011180634413-9378df42.png",L="/assets/true-image-20211011185404410-42c6b1b1.png",H="/assets/true-image-20211011185812462-f1442894.png",P="/assets/true-image-20211011213947643-c4c0edb2.png",J="/assets/true-image-20211108204644677-db3e599b.png",N="/assets/true-image-20211011185527444-c2faa6e2.png",V="/assets/true-image-20220716144723052-89988f9b.png",K="/assets/true-image-20220716145127272-b2fa4067.png",z="/assets/true-image-20220716145117155-97f7d5ff.png",F="/assets/true-image-20220716144913398-3a9acac7.png",G="/assets/true-image-20220716144848045-12ec1278.png",W="/assets/true-image-20220716144856335-5a9b1723.png",X={},Y=n("h1",null,"RabbitMQ",-1),Z={href:"https://www.rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"},$=e(`<h2 id="_1、简介、安装配置" tabindex="-1"><a class="header-anchor" href="#_1、简介、安装配置" aria-hidden="true">#</a> 1、简介、安装配置</h2><h3 id="_1-1、简介" tabindex="-1"><a class="header-anchor" href="#_1-1、简介" aria-hidden="true">#</a> 1.1、简介</h3><p>2.消息服务中两个重要概念:</p><p><strong>消息代理(message broker)和目的地(destination)</strong>：当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。</p><p>3.消息队列主要有两种形式的目的地:</p><p><strong>队列(queue)</strong> : 点对点消息通信(point-to-point)</p><p><strong>主题(topic)</strong> : 发布(publish) / 订阅(subscribe) 消息通信</p><p>4.点对点式</p><p>：消息发送者发送消息，消息代理将其放入1个队列中，消息接收者从队列中获取消息内容,消息读取后被移出队列。</p><p>：消息只有唯一的发送者和接受者,但并不是说只能有一个接收者</p><p>5.发布订阅式</p><p>：发送者(发布者)发送消息到主题，多个接收者(订阅者)监听(订阅)这个主题，那么就会在消息到达时同时收到消息</p><p>6.JMS (Java Message Service) JAVA消息服务</p><p>：基于JVM消息代理的规范。ActiveMQ、 HornetMQ是JMS实现</p><p>7.AMQP (Advanced Message Queuing Protocol)</p><p>：高级消息队列协议，也是一个消息代理的规范，兼容JMS</p><p>：RabbitMQ是AMQP的实现</p><p>8.Spring 支持</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-spring-jms提供了对JMS的支持
-spring-rabbit提供了对AMQP的支持
-需要ConnectionFactory的实现来连接消息代理
-提供JmsTemplate、RabbitTemplate来发送消息
-@JmsListener (JMS) 、@RabbitListener (AMQP) 注解在方法上监听消息代理发布的消息
-@EnableJms、 @EnableRabbit 开启支持
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>9.Spring Boot自动配置</p><blockquote><p>-JmsAutoConfiguration</p><p>-RabbitAutoConfiguration</p></blockquote><h3 id="_1-2、概念" tabindex="-1"><a class="header-anchor" href="#_1-2、概念" aria-hidden="true">#</a> 1.2、概念</h3><p>Publisher、message、虚拟机VHost、broker、Exchange、binding、Queue、Connection(长连接)、Consumer</p><p><img src="`+u+'" alt="image-20210929160654938"></p><h3 id="_1-3、docker-安装" tabindex="-1"><a class="header-anchor" href="#_1-3、docker-安装" aria-hidden="true">#</a> 1.3、docker 安装</h3>',25),nn={href:"https://www.rabbitmq.com/networking.html",target:"_blank",rel:"noopener noreferrer"},sn=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dkpull rabbitmq:management<span class="token punctuation">(</span>默认最新<span class="token punctuation">)</span>
dkpull rabbitmq:3.8.23-management
dkpull rabbitmq:3.9.7-management

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> rabbitmq3.8.23 <span class="token parameter variable">-p</span> <span class="token number">5671</span>:5671 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-p</span> <span class="token number">4369</span>:4369 <span class="token parameter variable">-p</span> <span class="token number">25672</span>:25672 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 rabbitmq:3.8.23-management
<span class="token function">docker</span> update rabbitmq3.8.23 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> rabbitmq3.8.23 <span class="token parameter variable">-p</span> <span class="token number">5671</span>:5671 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-p</span> <span class="token number">4369</span>:4369 <span class="token parameter variable">-p</span> <span class="token number">25672</span>:25672 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 rabbitmq:3.8.23-management

<span class="token number">4369</span>, <span class="token number">25672</span> <span class="token punctuation">(</span>Erlang发现<span class="token operator">&amp;</span>集群端口<span class="token punctuation">)</span>
<span class="token number">5672</span>, <span class="token number">5671</span> <span class="token punctuation">(</span>AMQP端口<span class="token punctuation">)</span>
<span class="token number">15672</span> <span class="token punctuation">(</span>web管理后台端口<span class="token punctuation">)</span>
<span class="token number">61613</span>, <span class="token number">61614</span> <span class="token punctuation">(</span>STOMP协议端口<span class="token punctuation">)</span>
<span class="token number">1883</span>, <span class="token number">8883</span> <span class="token punctuation">(</span>MQTT协议端口<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),an={href:"http://localhost:15672/#/",target:"_blank",rel:"noopener noreferrer"},tn=e('<p><img src="'+r+'" alt="image-20210929164609552"></p><h3 id="_1-4、运行机制" tabindex="-1"><a class="header-anchor" href="#_1-4、运行机制" aria-hidden="true">#</a> 1.4、运行机制</h3><p><img src="'+k+'" alt="image-20210929164752957"></p><h3 id="_1-5、exchange类型-点对点-direct、header-、订阅-fanout、topic" tabindex="-1"><a class="header-anchor" href="#_1-5、exchange类型-点对点-direct、header-、订阅-fanout、topic" aria-hidden="true">#</a> 1.5、Exchange类型：点对点（direct、header）、订阅（fanout、topic）</h3><p><img src="'+d+'" alt="image-20210929165249146"></p><p>目前用：direct、fanout、topid</p><h4 id="direct-点对点-精准匹配-完全匹配、单播模式" tabindex="-1"><a class="header-anchor" href="#direct-点对点-精准匹配-完全匹配、单播模式" aria-hidden="true">#</a> direct 点对点，精准匹配（完全匹配、单播模式）</h4><p><img src="'+m+'" alt="image-20210929165322771"></p><h4 id="fanout-订阅-广播模式" tabindex="-1"><a class="header-anchor" href="#fanout-订阅-广播模式" aria-hidden="true">#</a> fanout 订阅：广播模式</h4><p><img src="'+v+'" alt="image-20210929165442845"></p><h4 id="topic-订阅-订阅模式" tabindex="-1"><a class="header-anchor" href="#topic-订阅-订阅模式" aria-hidden="true">#</a> topic 订阅：订阅模式</h4><p><img src="'+b+'" alt="image-20210929165639595"></p><h3 id="_1-6、测试-创建交换机、队列、绑定-binding" tabindex="-1"><a class="header-anchor" href="#_1-6、测试-创建交换机、队列、绑定-binding" aria-hidden="true">#</a> 1.6、测试：创建交换机、队列、绑定 binding</h3><h4 id="创建交换机" tabindex="-1"><a class="header-anchor" href="#创建交换机" aria-hidden="true">#</a> 创建交换机</h4><p><img src="'+g+'" alt="image-20210929170325141"></p><hr><h4 id="创建队列" tabindex="-1"><a class="header-anchor" href="#创建队列" aria-hidden="true">#</a> 创建队列</h4><p><img src="'+h+'" alt="image-20210929170338550"></p><h4 id="绑定binding" tabindex="-1"><a class="header-anchor" href="#绑定binding" aria-hidden="true">#</a> 绑定binding</h4><p><img src="'+f+'" alt="image-20210929170625945"></p><h3 id="_1-7、实例" tabindex="-1"><a class="header-anchor" href="#_1-7、实例" aria-hidden="true">#</a> 1.7、实例</h3><p><img src="'+y+'" alt="image-20210929171451906"></p><h4 id="创建-交换机" tabindex="-1"><a class="header-anchor" href="#创建-交换机" aria-hidden="true">#</a> 创建 交换机：</h4><p>exchange.direct、exchange.fanout、exchange.topic</p><p><img src="'+q+'" alt="image-20210929171917453"></p><h4 id="创建-消息队列" tabindex="-1"><a class="header-anchor" href="#创建-消息队列" aria-hidden="true">#</a> 创建 消息队列：</h4><p>队列: kong、kong.emps、kong.news、kong004.news</p><p><img src="'+w+'" alt="image-20210929171218145"></p><h4 id="direct-绑定-binding" tabindex="-1"><a class="header-anchor" href="#direct-绑定-binding" aria-hidden="true">#</a> direct 绑定 binding</h4><p>exchange.direct: -&gt; kong、kong.emps、kong.news、kong004.news</p><h5>发消息</h5><p><img src="'+_+'" alt="image-20210929172547787"></p><h5>读消息</h5><p><img src="'+x+'" alt="image-20210929172613924"></p><p><img src="'+R+'" alt="image-20210929172902177"></p><hr><p>Ack Mode（确认模式：）: Nack message requeue true（Nack 消息重新排队，true查看后不会清除消息队列，false反之）Automatic ack（自动确认）、Reject requeue true|false（拒绝重新排队，true查看后不会清除消息队列，false反之）、</p><h4 id="fanout-绑定-binding" tabindex="-1"><a class="header-anchor" href="#fanout-绑定-binding" aria-hidden="true">#</a> fanout 绑定 binding</h4><p>exchange.fanout: -&gt; kong、kong.emps、kong.news、kong004.news</p><h5>发消息</h5><p><img src="'+E+'" alt="image-20210929175249961"></p><h5>读消息</h5><p><img src="'+M+'" alt="image-20210929175407953"></p><h4 id="topic-绑定-binding" tabindex="-1"><a class="header-anchor" href="#topic-绑定-binding" aria-hidden="true">#</a> topic 绑定 binding</h4><p>exchange.topic: -&gt; kong、kong.emps、kong.news、kong004.news</p><p><img src="'+j+'" alt="image-20210929180258342"></p><h5>发消息</h5><p><img src="'+T+'" alt="image-20210929181324171"></p><p><img src="'+C+'" alt="image-20210929181347034"></p><h5>读消息</h5><p><img src="'+Q+'" alt="image-20210929181503450"></p><h2 id="_2、整合java" tabindex="-1"><a class="header-anchor" href="#_2、整合java" aria-hidden="true">#</a> 2、整合java</h2><h3 id="_2-1、配置-a-name-配置" tabindex="-1"><a class="header-anchor" href="#_2-1、配置-a-name-配置" aria-hidden="true">#</a> 2.1、配置 &lt;a name=&quot;配置&quot;&gt;</h3><p><img src="'+S+`" alt="image-20210929181618065"></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-amqp --&gt;</span>
        <span class="token comment">&lt;!-- rabbitMQ 管理--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--dependency&gt;
            &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;
            &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;
            &lt;version&gt;5.14.2&lt;/version&gt;
        &lt;/dependency&gt;--&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># RabbitMQ配置</span>
<span class="token key attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token value attr-value">192.168.101.4</span>
<span class="token key attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token value attr-value">5672</span>
<span class="token comment"># 虚拟主机配置</span>
<span class="token key attr-name">spring.rabbitmq.virtual-host</span><span class="token punctuation">=</span><span class="token value attr-value">/</span>
<span class="token comment"># 开启发送端消息抵达Broker确认</span>
<span class="token key attr-name">spring.rabbitmq.publisher-confirms</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token comment"># 开启发送端消息抵达Queue确认</span>
<span class="token key attr-name">spring.rabbitmq.publisher-returns</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token comment"># 只要消息抵达Queue，就会异步发送优先回调returnfirm</span>
<span class="token key attr-name">spring.rabbitmq.template.mandatory</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token comment"># 手动ack消息，不使用默认的消费端确认</span>
<span class="token key attr-name">spring.rabbitmq.listener.simple.acknowledge-mode</span><span class="token punctuation">=</span><span class="token value attr-value">manual</span>

<span class="token key attr-name">spring</span><span class="token punctuation">:</span> 
<span class="token key attr-name">  rabbitmq</span><span class="token punctuation">:</span>
<span class="token key attr-name">    host</span><span class="token punctuation">:</span> <span class="token value attr-value">localhost</span>
<span class="token key attr-name">    port</span><span class="token punctuation">:</span> <span class="token value attr-value">5672</span>
<span class="token key attr-name">    username</span><span class="token punctuation">:</span> <span class="token value attr-value">guest</span>
<span class="token key attr-name">    password</span><span class="token punctuation">:</span> <span class="token value attr-value">guest</span>
<span class="token comment">    # 虚拟主机配置</span>
<span class="token key attr-name">    virtual-host</span><span class="token punctuation">:</span> <span class="token value attr-value">/</span>
<span class="token comment">    # 开启发送端消息抵达Broker确认类型【simple、correlated、none】</span>
<span class="token key attr-name">    publisher-confirm-type</span><span class="token punctuation">:</span> <span class="token value attr-value">simple</span>
<span class="token comment">    # 开启发送端消息抵达Queue确认</span>
<span class="token key attr-name">    publisher-returns</span><span class="token punctuation">:</span> <span class="token value attr-value">true</span>
<span class="token comment">    # 只要消息抵达Queue，就会异步发送优先回调 returnfirm</span>
<span class="token key attr-name">    template</span><span class="token punctuation">:</span>
<span class="token key attr-name">      mandatory</span><span class="token punctuation">:</span> <span class="token value attr-value">true</span>
<span class="token comment">    # 手动ack消息，不使用默认的消费端确认</span>
<span class="token key attr-name">    listener</span><span class="token punctuation">:</span>
<span class="token key attr-name">      simple</span><span class="token punctuation">:</span>
<span class="token key attr-name">        acknowledge-mode</span><span class="token punctuation">:</span> <span class="token value attr-value">manual</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>jf<span class="token punctuation">.</span>system<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ReturnedMessage</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">CorrelationData</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RabbitTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>support<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">Jackson2JsonMessageConverter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>support<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">MessageConverter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * RabbitMQ配置类
 *
 * <span class="token keyword">@author</span> jf
 * <span class="token keyword">@version</span> 1.0
 * @Description 描述
 * <span class="token keyword">@date</span> 2022/07/05 15:47
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRabbitMQConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
<span class="token comment">//    @Qualifier(&quot;redisTemplate&quot;)</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

<span class="token comment">//    @Primary</span>
<span class="token comment">//    @Bean(name = &quot;rabbitTemplate&quot;)</span>
<span class="token comment">//    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {</span>
<span class="token comment">//        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);</span>
<span class="token comment">//        rabbitTemplate.setMessageConverter(messageConverter());</span>
<span class="token comment">//        initRabbitTemplate();</span>
<span class="token comment">//        return rabbitTemplate;</span>
<span class="token comment">//    }</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MessageConverter</span> <span class="token function">messageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 定制RabbitTemplate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * -@PostConstruct： MyRabbitMQConfig 对象创建完成以后，执行这个方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 1、服务收到消息就会回调<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * ---- spring.rabbitmq.publisher-confirms: true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * ---- 设置确认回调 setConfirmCallback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 2、消息正确抵达队列就会进行回调<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * ---- spring.rabbitmq.publisher-returns: true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * ---- spring.rabbitmq.template.mandatory: true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * ---- 设置确认回调ReturnCallback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 3、消费端确认(保证每个消息都被正确消费，此时才可以broker删除这个消息)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * ---- 默认是自动确认的，只要消息接收到，客户端会自动确认，服务端就会移除这个消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * -------- 问题： 在处理信息时宕机了，会把所有的消息确认了，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * -------- 解决：需要手动确认信息，手动ack消息，不使用默认的消费端确认 spring.rabbitmq.listener.simple.acknowledge-mode=manual<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * ---- 签收了货物 channel.basicAck(deliveryTag, false);拒绝签收货物channel.basicNack(deliveryTag, false, false);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     */</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initRabbitTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*
         * 设置确认回调
         * 1、只要消息抵达Broker就ack=true
         * correlationData：当前消息的唯一关联数据(这个是消息的唯一id)
         * ack：消息是否成功收到
         * cause：失败的原因
         */</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">CorrelationData</span> correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> <span class="token class-name">String</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;confirm.&quot;</span> <span class="token operator">+</span> correlationData <span class="token operator">+</span> <span class="token string">&quot;==&gt;ack:[&quot;</span> <span class="token operator">+</span> ack <span class="token operator">+</span> <span class="token string">&quot;]==&gt;errorMsg:[&quot;</span> <span class="token operator">+</span> cause <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
         * 只要消息没有投递给指定的队列，就触发这个失败回调
         * message：投递失败的消息详细信息
         * replyCode：回复的状态码
         * replyText：回复的文本内容
         * exchange：当时这个消息发给哪个交换机
         * routingKey：当时这个消息用哪个路由键
         */</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnsCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnsCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span><span class="token class-name">ReturnedMessage</span> returned<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;==&gt;errorMsg[&quot;</span> <span class="token operator">+</span> returned<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] ==&gt;code[&quot;</span> <span class="token operator">+</span> returned<span class="token punctuation">.</span><span class="token function">getReplyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span> <span class="token operator">+</span>
                        <span class="token string">&quot;==&gt;text[&quot;</span> <span class="token operator">+</span> returned<span class="token punctuation">.</span><span class="token function">getReplyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] ==&gt;exchange[&quot;</span> <span class="token operator">+</span> returned<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] ==&gt;routingKey[&quot;</span> <span class="token operator">+</span> returned<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;].\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动类开始RabbitMQ</p><p>@EnableRabbit</p><h3 id="_2-2-amqpadmin-管理组件" tabindex="-1"><a class="header-anchor" href="#_2-2-amqpadmin-管理组件" aria-hidden="true">#</a> 2.2 amqpAdmin 管理组件</h3><p>private AmqpAdmin amqpAdmin;</p><h4 id="创建交换机、创建队列、绑定binding" tabindex="-1"><a class="header-anchor" href="#创建交换机、创建队列、绑定binding" aria-hidden="true">#</a> 创建交换机、创建队列、绑定binding</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建交换机：</span>
<span class="token class-name">Exchange</span> directExchange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;hello-java-exchange&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
amqpAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span>directExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建队列：</span>
<span class="token class-name">Queue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;hello-java-queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
amqpAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//绑定binding：</span>
<span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">&quot;hello-java-queue&quot;</span><span class="token punctuation">,</span>
				<span class="token class-name">Binding<span class="token punctuation">.</span>DestinationType</span><span class="token punctuation">.</span><span class="token constant">QUEUE</span><span class="token punctuation">,</span>
				<span class="token string">&quot;hello-java-exchange&quot;</span><span class="token punctuation">,</span>
				<span class="token string">&quot;hello.java&quot;</span><span class="token punctuation">,</span>
				<span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
amqpAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-rabbittemplate-消息" tabindex="-1"><a class="header-anchor" href="#_2-3-rabbittemplate-消息" aria-hidden="true">#</a> 2.3 RabbitTemplate 消息</h3><p>private RabbitTemplate rabbitTemplate;</p><h4 id="发消息" tabindex="-1"><a class="header-anchor" href="#发消息" aria-hidden="true">#</a> 发消息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">OrderReturnReasonEntity</span> reasonEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderReturnReasonEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   reasonEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   reasonEntity<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   reasonEntity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;reason&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   reasonEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   reasonEntity<span class="token punctuation">.</span><span class="token function">setSort</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>
    
   <span class="token comment">//1、发送消息,如果发送的消息是个对象，会使用序列化机制，将对象写出去，对象必须实现Serializable接口</span>
   <span class="token comment">//2、发送的对象类型的消息，可以是一个json</span>
   rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;hello-java-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello.java&quot;</span><span class="token punctuation">,</span>
         reasonEntity<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送完成:{}&quot;</span><span class="token punctuation">,</span> reasonEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="监听队列" tabindex="-1"><a class="header-anchor" href="#监听队列" aria-hidden="true">#</a> 监听队列：</h4><p><strong>注意</strong>：<em>同一个消息，只能有一个客户端收到；只有一个消息完全处理完，方法运行结束，我们就可以接收到下一个消息</em></p><h4 id="rabbitlistener-作用在类-方法上-监听哪些队列即可" tabindex="-1"><a class="header-anchor" href="#rabbitlistener-作用在类-方法上-监听哪些队列即可" aria-hidden="true">#</a> @RabbitListener 作用在类+方法上 (监听哪些队列即可）</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * queues：声明需要监听的队列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * Channel：当前传输数据的通道<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * message：原生消息信息（包含信息头+消息体）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * content：信息具体内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * -@RabbitListener 类+方法上 (监听哪些队列即可）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * -@RabbitHandler: 标在方法上(重载区分不同的消息)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * --- 使用\`RabbitHandler\`时，把\`RabbitListener\`添加在类上监听
     */</span>
	<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;hello-java-queue&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revieveMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">OrderReturnReasonEntity</span> content<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;原生消息信息--&quot;</span><span class="token operator">+</span>message<span class="token operator">+</span><span class="token string">&quot;\\r\\n===内容：&quot;</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----OrderReturnReasonEntity 消息处理完成----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rabbithandler-仅作用在方法-重载区分不同的消息-与rabbitlistener-写于类上-一同使用" tabindex="-1"><a class="header-anchor" href="#rabbithandler-仅作用在方法-重载区分不同的消息-与rabbitlistener-写于类上-一同使用" aria-hidden="true">#</a> @RabbitHandler 仅作用在方法（重载区分不同的消息）与<code>RabbitListener-写于类上</code> 一同使用</h4><p>如何区分不同的消息的：通过方法第一个参数类型来判断</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;demo.release.order.queue&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoListener</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revieveMessage02</span><span class="token punctuation">(</span><span class="token class-name">MqEntity</span> content<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;RabbitHandler---revieveMessage02() to MqEntity.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revieveMessage02</span><span class="token punctuation">(</span><span class="token class-name">SysConfig</span> content<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;RabbitHandler---revieveMessage02() to SysConfig.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,74),en={href:"http://localhost:8200/order/order/sendMQ",target:"_blank",rel:"noopener noreferrer"},pn=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;sendMQ&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;num&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token class-name">OrderReturnReasonEntity</span> reasonEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderReturnReasonEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				reasonEntity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;--OrderReturnReasonEntity--&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
				rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;hello-java-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello-java-queue.java&quot;</span><span class="token punctuation">,</span>
						reasonEntity<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
				<span class="token class-name">OrderEntity</span> orderEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				orderEntity<span class="token punctuation">.</span><span class="token function">setOrderSn</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				orderEntity<span class="token punctuation">.</span><span class="token function">setReceiverName</span><span class="token punctuation">(</span><span class="token string">&quot;--OrderEntity--&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
				rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;hello-java-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello-java-queue.java&quot;</span><span class="token punctuation">,</span>
						orderEntity<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token string">&quot;消息发送完成&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RabbitHandler</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revieveMessage02</span><span class="token punctuation">(</span><span class="token class-name">OrderReturnReasonEntity</span> content<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;原生消息信息--&quot;</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----OrderReturnReasonEntity 消息处理完成----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RabbitHandler</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revieveMessage03</span><span class="token punctuation">(</span><span class="token class-name">OrderEntity</span> content<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;原生消息信息--&quot;</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----OrderEntity 消息处理完成----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、投递消息-安全到达" tabindex="-1"><a class="header-anchor" href="#_3、投递消息-安全到达" aria-hidden="true">#</a> 3、投递消息-安全到达</h2><img src="`+D+'" alt="image-20211003221447339" style="zoom:80%;">',3),on={href:"https://www.rabbitmq.com/reliability.html",target:"_blank",rel:"noopener noreferrer"},cn=e('<p><img src="'+B+'" alt="image-20211003222246765"></p><p><img src="'+O+`" alt="image-20211003234548905"></p><p><a href="">请看2.1 配置</a></p><h3 id="_3-1、发送端确认" tabindex="-1"><a class="header-anchor" href="#_3-1、发送端确认" aria-hidden="true">#</a> 3.1、发送端确认</h3><p><a href="">请看2.1 配置config</a>：setConfirmCallback、setReturnCallback</p><h3 id="_3-2、消费端确认" tabindex="-1"><a class="header-anchor" href="#_3-2、消费端确认" aria-hidden="true">#</a> 3.2、消费端确认</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3、消费端确认(保证每个消息都被正确消费，此时才可以broker删除这个消息)&lt;p&gt;
---- 默认是自动确认的，只要消息接收到，客户端会自动确认，服务端就会移除这个消息
-------- 问题： 在处理信息时宕机了，会把所有的消息确认了，
-------- 解决：需要手动确认信息，手动ack消息，不使用默认的消费端确认spring.rabbitmq.listener.simple.acknowledge-mode=manual
---- 签收了货物 channel.basicAck(deliveryTag, false);拒绝签收货物channel.basicNack(deliveryTag, false, false);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+A+`" alt="image-20211003233121163" style="zoom:90%;"><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitHandler</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revieveMessage02</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">OrderReturnReasonEntity</span> content<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;原生消息信息--&quot;</span><span class="token operator">+</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//签收货物,非批量模式</span>
   <span class="token keyword">try</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>deliveryTag<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token comment">//收货</span>
         channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;签收了货物... &quot;</span><span class="token operator">+</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
         <span class="token comment">//退货requeue=false 丢弃requeue=true 发回服务器，服务器重新入队。</span>
         <span class="token comment">//long deliveryTag, boolean multiple, boolean requeue</span>
         channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">//Long deliveryTag, boolean requeue</span>
         <span class="token comment">//channel.basicReject();</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;没有签收了货物...&quot;</span><span class="token operator">+</span>deliveryTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//网络中断</span>
   <span class="token punctuation">}</span>

   <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----OrderReturnReasonEntity 消息处理完成----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、mq延迟队列" tabindex="-1"><a class="header-anchor" href="#_4、mq延迟队列" aria-hidden="true">#</a> 4、MQ延迟队列</h2><h3 id="_4-1、使用场景" tabindex="-1"><a class="header-anchor" href="#_4-1、使用场景" aria-hidden="true">#</a> 4.1、使用场景</h3><p>场景: 比如未付款订单，超过一定时间后，系统自动取消订单并释放占有物品。</p><p>常用解决方案: spring的schedule <em>定时任务</em> 轮询数据库 缺点：消耗系统内存、增加了数据库的压力、存在较大的时间误差 解决：rabbitmq的消息 TTL 和死信 Exchange 结合</p><p><img src="`+I+'" alt="image-20211011180618706"></p><h3 id="_4-2、时效性问题" tabindex="-1"><a class="header-anchor" href="#_4-2、时效性问题" aria-hidden="true">#</a> 4.2、时效性问题</h3><p><img src="'+U+`" alt="image-20211011180634413"></p><h3 id="_4-3、ttl-消息的存活时间-和死信-exchange" tabindex="-1"><a class="header-anchor" href="#_4-3、ttl-消息的存活时间-和死信-exchange" aria-hidden="true">#</a> 4.3、TTL（消息的存活时间）和死信 Exchange</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#·消息的TTL就是消息的存活时间。</span>
<span class="token comment">#·RabbitMQ可以对队列和消息分别设置TTL：</span>
    <span class="token comment">#-对队列设置就是队列没有消费者连着的保留时间，也可以对每一个单独的消息做单独的设置。超过了这个时间，我们认为这个消息就死了，称之为死信。</span>
    <span class="token comment">#- 如果队列设置了，消息也设置了,那么会取小的。所以一个消息如果被路由到不同的队列中，这个消息死亡的时间有可能不一-样(不同的队列设置)。这里单讲单个消息的TTL,因为它才是实现延迟任务的关键。可以通过设置消息的expiration字段或者x-message-ttI属性来设置时间，两者是一样的效果。</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4、延迟队列实现" tabindex="-1"><a class="header-anchor" href="#_4-4、延迟队列实现" aria-hidden="true">#</a> 4.4、延迟队列实现</h3><h4 id="设置-队列-过期时间" tabindex="-1"><a class="header-anchor" href="#设置-队列-过期时间" aria-hidden="true">#</a> - - 设置 队列 过期时间</h4><p>设计建议规范：（基于事件模型的交换机设计） 1、交换机命名：业务+ exchange; 交换机为Topic 2、路由键：事件+需要感知的业务(可以不写) 3、队列命名：事件+想要监听服务名+ queue 4、绑定关系：事件+感知的业务(#)</p><p><img src="`+L+'" alt="image-20211011185404410"></p><p>1</p><p><img src="'+H+'" alt="image-20211011185812462"></p><p><img src="'+P+'" alt="image-20211011213947643"></p><img src="'+J+`" alt="image-20211108204644677" style="zoom:100%;"><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 死信队列
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 对队列设置过期，而不是对消息设置过期
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">orderDelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;order-event-exchange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;order.release.order&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 消息过期时间 1分钟</span>
  arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//消息过期后丢到order.delay.queue队列，而不是删除</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;order.delay.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="设置-消息-过期时间" tabindex="-1"><a class="header-anchor" href="#设置-消息-过期时间" aria-hidden="true">#</a> - - 设置 消息 过期时间</h4><p><img src="`+N+`" alt="image-20211011185527444"></p><h4 id="创建业务交换机-队列" tabindex="-1"><a class="header-anchor" href="#创建业务交换机-队列" aria-hidden="true">#</a> - - 创建业务交换机&amp;队列</h4><h2 id="_5、模拟订单超时自动关闭订单及释放库存" tabindex="-1"><a class="header-anchor" href="#_5、模拟订单超时自动关闭订单及释放库存" aria-hidden="true">#</a> 5、模拟订单超时自动关闭订单及释放库存</h2><h3 id="springbean自动创建交换机、队列-订单超时-死信队列-、绑定" tabindex="-1"><a class="header-anchor" href="#springbean自动创建交换机、队列-订单超时-死信队列-、绑定" aria-hidden="true">#</a> springBean自动创建交换机、队列（订单超时-死信队列）、绑定</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>jf<span class="token punctuation">.</span>system<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 自动创建 Exchange类型：点对点（direct：精准匹配（完全匹配、单播模式）、header）、订阅（fanout：广播模式、topic：路由键模式）、队列、绑定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * -- new Exchange (字符串名称、布尔持久型、布尔型自动删除、参数);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * ---- String name, boolean durable, boolean autoDelete, Map&lt; String, Object&gt; arguments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * -- new Queue(队列名字, 是否持久化, 是否独占, 是否自动删除, 参数);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * ---- name - 队列的名称 - 不能为空；设置为 &quot;&quot; 让代理生成名称。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * ---- durable - 持久 - 如果我们声明一个持久队列，则为真（该队列将在服务器重新启动后继续存在）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * ---- exclusive - 独占 - 如果我们声明一个独占队列，则为真（该队列将仅由声明者的连接使用）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * ---- autoDelete – 如果服务器在不再使用队列时应该删除队列，则为 true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * ---- arguments - 用于声明队列的参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 容器中的Queue、Exchange、Binding 会自动创建（在RabbitMQ）不存在的情况下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
 *
 * <span class="token keyword">@author</span> jf
 * <span class="token keyword">@version</span> 1.0
 * @Description 描述
 * <span class="token keyword">@date</span> 2022/07/05 15:47
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAutoBeanMQConfig</span> <span class="token punctuation">{</span>
<span class="token comment">//////////////////////////////交换机///</span>

    <span class="token doc-comment comment">/**
     * 创建 Topic 类型的Exchange
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Exchange</span> <span class="token function">demoEventTopicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">&quot;demo-topic-exchange&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">//////////////////////////////消息队列///</span>

    <span class="token comment">/*
     * 死信队列
     * &lt;p&gt;
     * 对队列设置过期，而不是对消息设置过期
     * &lt;p&gt;
     * 设计建议规范：（基于事件模型的交换机设计）&lt;p&gt;
     * 1、交换机命名：业务+ exchange; 交换机为Topic&lt;p&gt;
     * 2、路由键：事件+需要感知的业务(可以不写)&lt;p&gt;
     * 3、队列命名：事件+想要监听服务名+ queue&lt;p&gt;
     * 4、绑定关系：事件+感知的业务(#)&lt;p&gt;
     */</span>

    <span class="token doc-comment comment">/**
     * 订单延迟队列
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">demoDelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;demo-topic-exchange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;demo.release.order&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 消息过期时间 单位（毫秒）测试以1分钟为例</span>
        arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//消息过期后丢到demo.delay.queue队列，而不是删除</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;demo.delay.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 释放订单队列
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">demoReleaseQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;demo.release.order.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 释放库存队列
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">stockReleaseQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;demo.release.stock.queue&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">//////////////////////////////绑定</span>

    <span class="token doc-comment comment">/**
     * 绑定订单延迟队列
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 消息队列：demo.delay.queue --&gt; 交换机：demo-topic-exchange --路由键：demo.create.order
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">demoCreateBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">&quot;demo.delay.queue&quot;</span><span class="token punctuation">,</span>
                <span class="token class-name">Binding<span class="token punctuation">.</span>DestinationType</span><span class="token punctuation">.</span><span class="token constant">QUEUE</span><span class="token punctuation">,</span>
                <span class="token string">&quot;demo-topic-exchange&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;demo.create.order&quot;</span><span class="token punctuation">,</span>
                <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 绑定释放订单队列
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 消息队列：demo.release.order.queue --&gt; 交换机：demo-topic-exchange --路由键：demo.release.order
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">demoReleaseBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">&quot;demo.release.order.queue&quot;</span><span class="token punctuation">,</span>
                <span class="token class-name">Binding<span class="token punctuation">.</span>DestinationType</span><span class="token punctuation">.</span><span class="token constant">QUEUE</span><span class="token punctuation">,</span>
                <span class="token string">&quot;demo-topic-exchange&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;demo.release.order.#&quot;</span><span class="token punctuation">,</span>
                <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 订单释放直接和库存释放进行绑定
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">demoReleaseOtherBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">&quot;demo.release.stock.queue&quot;</span><span class="token punctuation">,</span>
                <span class="token class-name">Binding<span class="token punctuation">.</span>DestinationType</span><span class="token punctuation">.</span><span class="token constant">QUEUE</span><span class="token punctuation">,</span>
                <span class="token string">&quot;demo-topic-exchange&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;demo.release.stock.#&quot;</span><span class="token punctuation">,</span>
                <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模拟创建订单" tabindex="-1"><a class="header-anchor" href="#模拟创建订单" aria-hidden="true">#</a> 模拟创建订单</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 创建订单消息
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/sendOrderMessage&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">sendOrderMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MqEntity</span> mqEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MqEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mqEntity<span class="token punctuation">.</span><span class="token function">setExchange</span><span class="token punctuation">(</span><span class="token string">&quot;demo-topic-exchange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mqEntity<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;订单id--&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>mqEntity<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;demo.create.order&quot;</span><span class="token punctuation">,</span>
                mqEntity<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&quot;创建订单消息发送完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听到订单超时了-开始业务处理-并通知释放库存队列" tabindex="-1"><a class="header-anchor" href="#监听到订单超时了-开始业务处理-并通知释放库存队列" aria-hidden="true">#</a> 监听到订单超时了，开始业务处理，并通知释放库存队列</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>jf<span class="token punctuation">.</span>system<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>jf<span class="token punctuation">.</span>system<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">MqEntity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Message</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RabbitHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RabbitListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RabbitTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 监听关闭订单队列，定时关闭订单
 *
 * <span class="token keyword">@author</span> jf
 * <span class="token keyword">@version</span> 1.0
 * @Description 描述
 * <span class="token keyword">@date</span> 2022/07/05 19:32
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;demo.release.order.queue&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderListener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token class-name">MqEntity</span> mqEntity<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;准备关闭订单:{}&quot;</span><span class="token punctuation">,</span> mqEntity<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;关闭订单{}--OK&quot;</span><span class="token punctuation">,</span> mqEntity<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//并通知库存队列</span>
            mqEntity<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;释放库存&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>mqEntity<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;demo.release.stock&quot;</span><span class="token punctuation">,</span> mqEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;关闭订单{}--error&quot;</span><span class="token punctuation">,</span> mqEntity<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听释放库存队列-自动释放库存" tabindex="-1"><a class="header-anchor" href="#监听释放库存队列-自动释放库存" aria-hidden="true">#</a> 监听释放库存队列，自动释放库存</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>jf<span class="token punctuation">.</span>system<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>jf<span class="token punctuation">.</span>system<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">MqEntity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Message</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RabbitHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RabbitListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 监听释放库存队列，自动释放库存
 *
 * <span class="token keyword">@author</span> jf
 * <span class="token keyword">@version</span> 1.0
 * @Description 描述
 * <span class="token keyword">@date</span> 2022/07/12 18:19
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;demo.release.stock.queue&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StockListener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token class-name">MqEntity</span> mqEntity<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;准备释放库存:{}&quot;</span><span class="token punctuation">,</span> mqEntity<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//TODO Service层处理关闭</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;释放库存--OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;释放库存--error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看初始化交换机</p><p><img src="`+V+'" alt="image-20220716144723052"></p><p>查看初始化队列</p><p><img src="'+K+'" alt="image-20220716145127272"></p><hr>',44),ln={href:"http://127.0.0.1:9210/jf-system-dev/mq/sendOrderMessage",target:"_blank",rel:"noopener noreferrer"},un=n("p",null,"查看订单消息投递到订单延迟队列情况",-1),rn=n("p",null,[n("img",{src:z,alt:"image-20220716145117155"})],-1),kn=n("p",null,[n("img",{src:F,alt:"image-20220716144913398"})],-1),dn=n("p",null,"1分钟后，查看处理结果",-1),mn=n("p",null,[n("img",{src:G,alt:"image-20220716144848045"})],-1),vn=n("p",null,[n("img",{src:W,alt:"image-20220716144856335"})],-1);function bn(gn,hn){const a=l("ExternalLinkIcon");return o(),c("div",null,[i(" more "),Y,n("p",null,[n("a",Z,[s("https://www.rabbitmq.com/"),t(a)])]),$,n("p",null,[n("a",nn,[s("https://www.rabbitmq.com/networking.html"),t(a)])]),sn,n("p",null,[n("a",an,[s("http://localhost:15672/#/"),t(a)]),s(" 密码：默认（user：guest；pass：guest）")]),tn,n("p",null,[n("a",en,[s("http://localhost:8200/order/order/sendMQ"),t(a)])]),pn,n("p",null,[n("a",on,[s("https://www.rabbitmq.com/reliability.html"),t(a)])]),cn,n("p",null,[s("模拟创建订单："),n("a",ln,[s("http://127.0.0.1:9210/jf-system-dev/mq/sendOrderMessage"),t(a)])]),un,rn,kn,dn,mn,vn])}const yn=p(X,[["render",bn],["__file","mq-rabbit.html.vue"]]);export{yn as default};
