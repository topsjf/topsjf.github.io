import{_ as e,V as o,W as c,a0 as l,X as n,Y as s,Z as t,$ as p,G as i}from"./framework-ed4f969a.js";const u={},k=n("h1",null,"2. 单点登录（SSO）",-1),r=n("p",null,"SSO英文全称Single Sign On，单点登录。",-1),d=n("p",null,"SSO是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。",-1),v=n("h2",{id:"_2-1-cookie问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-cookie问题","aria-hidden":"true"},"#"),s(" 2.1. cookie问题")],-1),m=n("p",null,"电商平台通常由多个微服务组成，每个微服务都有独立的域名，而cookie是有作用域的。",-1),b=n("p",null,"查看浏览器控制台：",-1),g=n("p",null,"domain：作用域名",-1),h=n("th",null,"domain参数",-1),y={href:"http://atguigu.com",target:"_blank",rel:"noopener noreferrer"},w={href:"http://sso.atguigu.com",target:"_blank",rel:"noopener noreferrer"},f={href:"http://order.atguigu.com",target:"_blank",rel:"noopener noreferrer"},_={href:"http://atguigu.com",target:"_blank",rel:"noopener noreferrer"},x=n("td",null,"√",-1),q=n("td",null,"√",-1),j=n("td",null,"√",-1),S={href:"http://sso.atguigu.com",target:"_blank",rel:"noopener noreferrer"},C=n("td",null,"×",-1),P=n("td",null,"√",-1),A=n("td",null,"×",-1),F={href:"http://order.atguigu.com",target:"_blank",rel:"noopener noreferrer"},U=n("td",null,"×",-1),I=n("td",null,"×",-1),E=n("td",null,"√",-1),G=p(`<p>domain有两点要注意：</p><p>​ 1. <strong>domain参数可以设置父域名以及自身，但不能设置其它域名，包括子域名，否则cookie不起作用。</strong></p><p>​ 2. <strong>cookie的作用域是domain本身以及domain下的所有子域名。</strong></p><p>Cookie的路径（Path）：</p><p>​ response.addCookie默认放在当前路径下，访问当前路径下的所有请求都会带</p><p>​ 设置/标识项目根路径，访问项目任何位置都会携带</p><h2 id="_2-2-演示案例" tabindex="-1"><a class="header-anchor" href="#_2-2-演示案例" aria-hidden="true">#</a> 2.2. 演示案例</h2><p>把课前资料中的sso演示工程 《sso-example》导入idea，并且启动。</p><p>在hosts文件中配置域名的映射：</p><p>追加配置如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>127.0.0.1 client.atguigu.com
127.0.0.1 sso.atguigu.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-1-测试一-不能访问兄弟域名cookie" tabindex="-1"><a class="header-anchor" href="#_2-2-1-测试一-不能访问兄弟域名cookie" aria-hidden="true">#</a> 2.2.1. 测试一：不能访问兄弟域名cookie</h3>`,12),O={href:"http://client.atguigu.com:8080/hello",target:"_blank",rel:"noopener noreferrer"},R=p('<p>由于没有登录会重定向到登录页面：</p><p>输入用户名密码（任意）点击登录，又回到了上述页面。</p><p>查看浏览器cookie，发现：</p><p>sso.atguigu.com下已经有token信息。那么为什么又回到了登录页面呢？</p><p>这是由于点击登录时，cookie放入了sso.atguigu.com这个作用域，client域下没有cookie导致，再次访问client时，client认为没有登录，又重定向到登录页面</p><h3 id="_2-2-2-测试二-可以访问父域名的cookie" tabindex="-1"><a class="header-anchor" href="#_2-2-2-测试二-可以访问父域名的cookie" aria-hidden="true">#</a> 2.2.2. 测试二：可以访问父域名的cookie</h3><p>修改sso-service工程LoginController类的login方法，把cookie的作用域设置为<code>atguigu.com</code></p><p>重启sso-service。</p><p>并清理掉浏览器中的cookie：</p>',9),H={href:"http://client.atguigu.com:8080/hello",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"依然重定向到登录页面：",-1),K=n("p",null,"输入任意内容，点击登录：",-1),L=n("p",null,"可以登录成功！！",-1),N=n("h3",{id:"_2-2-3-测试三-cookie的作用路径",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-3-测试三-cookie的作用路径","aria-hidden":"true"},"#"),s(" 2.2.3. 测试三：cookie的作用路径")],-1),J=n("p",null,[s("修改sso-service工程LoginController类的login方法，把cookie的作用路径设置为"),n("code",null,"/hello")],-1),W=n("p",null,"重启sso-service服务，并清理掉cookie信息。",-1),M={href:"http://client.atguigu.com:8080/hello",target:"_blank",rel:"noopener noreferrer"},D=n("p",null,"依然重定向到登录页面，输入任意内容，点击登录：",-1),V=n("p",null,"可以登录成功，但是cookie的作用路径是/hello。",-1),B={href:"http://client.atguigu.com:8080/hello1",target:"_blank",rel:"noopener noreferrer"},X=p('<p>又会跳转到登录页面。原因：cookie只能在/hello路径及其子路径下可以正常访问。</p><h2 id="_2-3-有状态登录" tabindex="-1"><a class="header-anchor" href="#_2-3-有状态登录" aria-hidden="true">#</a> 2.3. 有状态登录</h2><p>为了保证客户端cookie的安全性，服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如tomcat中的session。</p><p>例如登录：用户登录后，我们把登录者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。然后下次请求，用户携带cookie值来，我们就能识别到对应session，从而找到用户的信息。</p><p>缺点是什么？</p><ul><li>服务端保存大量数据，增加服务端压力</li><li>服务端保存用户状态，无法进行水平扩展</li><li>客户端请求依赖服务端，多次请求必须访问同一台服务器</li></ul><p>即使使用redis保存用户的信息，也会损耗服务器资源。</p><h2 id="_2-4-无状态登录" tabindex="-1"><a class="header-anchor" href="#_2-4-无状态登录" aria-hidden="true">#</a> 2.4. 无状态登录</h2><p>微服务集群中的每个服务，对外提供的都是Rest风格的接口。而Rest风格的一个最重要的规范就是：服务的无状态性，即：</p><ul><li>服务端不保存任何客户端请求者信息</li><li>客户端的每次请求必须具备自描述信息，通过这些信息识别客户端身份</li></ul><p>带来的好处是什么呢？</p><ul><li>客户端请求不依赖服务端的信息，任何多次请求不需要必须访问到同一台服务</li><li>服务端的集群和状态对客户端透明</li><li>服务端可以任意的迁移和伸缩</li><li>减小服务端存储压力</li></ul><h2 id="_2-5-无状态登录流程" tabindex="-1"><a class="header-anchor" href="#_2-5-无状态登录流程" aria-hidden="true">#</a> 2.5. 无状态登录流程</h2><p>无状态登录的流程：</p><ul><li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li><li>认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</li><li>以后每次请求，客户端都携带认证的token</li><li>服务的对token进行解密，判断是否有效。</li></ul><p>流程图：</p><p>整个登录过程中，最关键的点是什么？</p><p><strong>token的安全性</strong></p><p>token是识别客户端身份的唯一标示，如果加密不够严密，被人伪造那就完蛋了。</p><p>采用何种方式加密才是安全可靠的呢？</p><p>我们将采用<code>JWT + RSA非对称加密</code></p><h1>3. jwt实现无状态登录</h1>',22),Z={href:"https://jwt.io",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/jwtk/jjwt",target:"_blank",rel:"noopener noreferrer"},z=p('<h2 id="_3-1-数据格式" tabindex="-1"><a class="header-anchor" href="#_3-1-数据格式" aria-hidden="true">#</a> 3.1. 数据格式</h2><p>JWT包含三部分数据：</p><ul><li><p>Header：头部，通常头部有两部分信息：</p><ul><li>token类型：JWT</li><li>加密方式：base64（HS256）</li></ul></li><li><p>Payload：载荷，就是有效数据，一般包含下面信息：</p><ul><li>用户身份信息（注意，这里因为采用base64编码，可解码，因此不要存放敏感信息）</li><li>注册声明：如token的签发时间，过期时间，签发人等</li></ul><p>这部分也会采用base64编码，得到第二部分数据</p></li><li><p>Signature：签名，是整个数据的认证信息。根据前两步的数据，再加上指定的密钥（secret）（不要泄漏，最好周期性更换），通过base64编码生成。用于验证整个数据完整和可靠性</p></li></ul><h2 id="_3-2-jwt交互流程" tabindex="-1"><a class="header-anchor" href="#_3-2-jwt交互流程" aria-hidden="true">#</a> 3.2. JWT交互流程</h2><p>流程图：</p><p>步骤翻译：</p><ul><li>1、用户登录</li><li>2、服务的认证，通过后根据secret生成token</li><li>3、将生成的token返回给浏览器</li><li>4、用户每次请求携带token</li><li>5、服务端利用公钥解读jwt签名，判断签名有效后，从Payload中获取用户信息</li><li>6、处理请求，返回响应结果</li></ul><p>因为JWT签发的token中已经包含了用户的身份信息，并且每次请求都会携带，这样服务的就无需保存用户信息，甚至无需去数据库查询，完全符合了Rest的无状态规范。</p><h2 id="_3-3-非对称加密" tabindex="-1"><a class="header-anchor" href="#_3-3-非对称加密" aria-hidden="true">#</a> 3.3. 非对称加密</h2><p>加密技术是对信息进行编码和解码的技术，编码是把原来可读信息（又称明文）译成代码形式（又称密文），其逆过程就是解码（解密），加密技术的要点是加密算法，加密算法可以分为三类：</p>',10),$=p("<li>对称加密，如AES <ul><li>基本原理：将明文分成N个组，然后使用密钥对各个组进行加密，形成各自的密文，最后把所有的分组密文进行合并，形成最终的密文。</li><li>优势：算法公开、计算量小、加密速度快、加密效率高</li><li>缺陷：双方都使用同样密钥，安全性得不到保证</li></ul></li><li>非对称加密，如RSA <ul><li>基本原理：同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端 <ul><li>私钥加密，持有公钥才可以解密</li><li>公钥加密，持有私钥才可解密</li></ul></li><li>优点：安全，难以破解</li><li>缺点：算法比较耗时</li></ul></li>",2),Q={href:"https://baike.baidu.com/item/%E5%AF%86%E9%92%A5",target:"_blank",rel:"noopener noreferrer"},nn=p(`<p>RSA算法历史：</p><p>1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字缩写：RSA</p><h1>4. 搭建授权中心</h1><p>用户鉴权：</p><ul><li>接收用户的登录请求，通过用户中心的接口进行校验，通过后生成JWT</li><li>使用私钥生成JWT并返回</li></ul><p>有一些生成jwt，解析jwt这样行为的工具类，以后在其它微服务中也会用到，因此放在gmall-core中。</p><h2 id="_4-1-创建工程" tabindex="-1"><a class="header-anchor" href="#_4-1-创建工程" aria-hidden="true">#</a> 4.1. 创建工程</h2><p>pom.xml中添加gmall-common及gmall-ums-interface的依赖</p><p>启动类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GmallAuthApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GmallAuthApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bootstrap.yml：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> auth<span class="token punctuation">-</span>service
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>application.yml：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">18089</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span>
        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8179</span>
  <span class="token key atrule">zipkin</span><span class="token punctuation">:</span>
    <span class="token key atrule">base-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>9411/
    <span class="token key atrule">sender</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> web
    <span class="token key atrule">discovery-client-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">sleuth</span><span class="token punctuation">:</span>
    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>
      <span class="token key atrule">probability</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span>
    <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>网关工程gmall-gateway添加用户授权的网关路由：</p>`,15),sn={href:"http://sso.gmall.com",target:"_blank",rel:"noopener noreferrer"},an=p(`<p>在hosts文件中添加sso.gmall.com的域名映射。</p><p>注意：不要忘记重启网关，重新加载nginx配置。</p><h2 id="_4-2-jwt工具类" tabindex="-1"><a class="header-anchor" href="#_4-2-jwt工具类" aria-hidden="true">#</a> 4.2. JWT工具类</h2><p>gmall-common工程中已经封装了jwt相关的工具类：</p><p>并在gmall-common中的pom.xml中引入了jwt相关的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.10.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.10.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt-jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.10.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>joda-time<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.10.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-测试工具类" tabindex="-1"><a class="header-anchor" href="#_4-3-测试工具类" aria-hidden="true">#</a> 4.3. 测试工具类</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTest</span> <span class="token punctuation">{</span>

    <span class="token comment">// 别忘了创建D:\\\\project\\rsa目录</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> pubKeyPath <span class="token operator">=</span> <span class="token string">&quot;D:\\\\project\\\\rsa\\\\rsa.pub&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> priKeyPath <span class="token operator">=</span> <span class="token string">&quot;D:\\\\project\\\\rsa\\\\rsa.pri&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">PublicKey</span> publicKey<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">PrivateKey</span> privateKey<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRsa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">RsaUtils</span><span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span>pubKeyPath<span class="token punctuation">,</span> priKeyPath<span class="token punctuation">,</span> <span class="token string">&quot;234&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">//    @BeforeEach</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetRsa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>publicKey <span class="token operator">=</span> <span class="token class-name">RsaUtils</span><span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span>pubKeyPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>privateKey <span class="token operator">=</span> <span class="token class-name">RsaUtils</span><span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span>priKeyPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGenerateToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;liuyan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 生成token</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">JwtUtils</span><span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;token = &quot;</span> <span class="token operator">+</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testParseToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token string">&quot;eyJhbGciOiJSUzI1NiJ9.eyJpZCI6IjExIiwidXNlcm5hbWUiOiJsaXV5YW4iLCJleHAiOjE1ODYwOTg0MDd9.Gjt968x1OhFVUSDvnKK_TdNgau6wFCLXF98Teosidf__FewtOW3ytA5I1H9jU3DVzrhDfZl0fFfxNJrPPb75_WNKj06f6lB2yRy8fbazzVDrtzsBcPqEa1HeVoNA3NmUVQNlPC3ckYhZ-yu9BT3km3lY0eGum_jPivBHLsXLMbFnSnpXIjYi3kguJfXXRZYKuanGttCV6t7uCWd10GWhEBbXhIi81houaALr2cDWtqHUBC6FbJ0oVdxAaZixwnZJm_vSUjmYjM062H3CJwX44WCxLZXhSRCWhWo3HGpSU2LuUyfd_IJw8MDdI5w31P3dRczAjMjMykAhGBlOCGwy7Q&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// 解析token</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">JwtUtils</span><span class="token punctuation">.</span><span class="token function">getInfoFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;id: &quot;</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;userName: &quot;</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试生成公钥和私钥，我们运行testRsa方法：<strong>注意需要把@Before方法注释掉</strong></p><p>运行之后，查看目标目录：</p><p>测试testGenerateToken生成token：注意把@BeforeEach的注释去掉的</p><p>测试解析token：</p><p>正常情况：</p><p>任意改动一下：</p><h2 id="_4-4-配置公钥和私钥" tabindex="-1"><a class="header-anchor" href="#_4-4-配置公钥和私钥" aria-hidden="true">#</a> 4.4. 配置公钥和私钥</h2><p>我们需要在授权中心生成真正的公钥和私钥。可以把相关配置内容配置到gmall-auth工程的<code>application.yml</code>中或者配置中心：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">auth</span><span class="token punctuation">:</span>
  <span class="token key atrule">jwt</span><span class="token punctuation">:</span>
    <span class="token key atrule">pubKeyPath</span><span class="token punctuation">:</span> D<span class="token punctuation">:</span>\\\\project<span class="token punctuation">-</span>1010\\\\rsa\\\\rsa.pub
    <span class="token key atrule">priKeyPath</span><span class="token punctuation">:</span> D<span class="token punctuation">:</span>\\\\project<span class="token punctuation">-</span>1010\\\\rsa\\\\rsa.pri
    <span class="token key atrule">secret</span><span class="token punctuation">:</span> 30489ouerweljrLROE@<span class="token comment">#)(@$*343jlsdf</span>
    <span class="token key atrule">cookieName</span><span class="token punctuation">:</span> GMALL<span class="token punctuation">-</span>TOKEN
    <span class="token key atrule">expire</span><span class="token punctuation">:</span> <span class="token number">180</span>
    <span class="token key atrule">unick</span><span class="token punctuation">:</span> unick
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后编写属性类读取jwt配置，并从秘钥配置文件中读取出响应的公钥及私钥，加载这些数据：</p><p>内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;auth.jwt&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> pubKeyPath<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> priKeyPath<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> secret<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cookieName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> expire<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> unick<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">PublicKey</span> publicKey<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">PrivateKey</span> privateKey<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 该方法在构造方法执行之后执行
     */</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">File</span> pubFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pubKeyPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">File</span> priFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>priKeyPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果公钥或者私钥不存在，重新生成公钥和私钥</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pubFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>priFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">RsaUtil</span><span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span>pubKeyPath<span class="token punctuation">,</span> priKeyPath<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>publicKey <span class="token operator">=</span> <span class="token class-name">RsaUtil</span><span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span>pubKeyPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>privateKey <span class="token operator">=</span> <span class="token class-name">RsaUtil</span><span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span>priKeyPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;生成公钥和私钥出错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>5. 完成登录功能</h1><h2 id="_5-1-跳转到登录页" tabindex="-1"><a class="header-anchor" href="#_5-1-跳转到登录页" aria-hidden="true">#</a> 5.1. 跳转到登录页</h2><p>参照京东，当点击登录跳转到登录页面时，如下：s</p><p>会记录跳转到登录页面前的页面地址，登录成功后要回到原来的页面。</p><p>把课前资料动态页面中的common目录及login.html拷贝到templates目录下</p><p>添加AuthController，并添加页面跳转方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;toLogin.html&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toLogin</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;returnUrl&quot;</span><span class="token punctuation">)</span><span class="token class-name">String</span> returnUrl<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token comment">// 把登录前的页面地址，记录到登录页面，以备将来登录成功，回到登录前的页面</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;returnUrl&quot;</span><span class="token punctuation">,</span> returnUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在login.html页面会记录returnUrl地址，将来登录成功后重定向到该地址：</p>`,28),tn={href:"http://sso.gmall.com/toLogin.html?returnUrl=http://www.gmall.com",target:"_blank",rel:"noopener noreferrer"},pn=p(`<p>效果如下：</p><h2 id="_5-2-完成登录功能" tabindex="-1"><a class="header-anchor" href="#_5-2-完成登录功能" aria-hidden="true">#</a> 5.2. 完成登录功能</h2><p>接下来，我们需要在<code>gmall-auth</code>编写登录代码。基本流程如下：</p><ul><li>客户端携带用户名和密码请求登录 ，并携带登录前页面的路径</li><li>授权中心调用用户中心接口，根据用户名和密码查询用户信息</li><li>用户名密码不正确，不能获取用户，登录失败</li><li>如果校验成功，则生成JWT，jwt要防止别人盗取</li><li>把jwt放入cookie</li><li>为了方便页面展示登录用户昵称，向cookie中单独写入昵称（例如京东cookie中的的<strong>unick</strong>）</li><li>重定向 回到登录前的页面</li></ul><h3 id="_5-2-1-authcontroller" tabindex="-1"><a class="header-anchor" href="#_5-2-1-authcontroller" aria-hidden="true">#</a> 5.2.1. AuthController</h3><p>编写授权接口，我们接收登录名和密码及登陆前的页面地址，登录成功后重定向到登陆前页面。</p><ul><li>请求方式：post</li><li>请求路径：/login</li><li>请求参数：loginName和password</li><li>返回结果：无</li></ul><p>代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AuthService</span> authService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JwtProperties</span> jwtProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;toLogin.html&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toLogin</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;returnUrl&quot;</span><span class="token punctuation">)</span><span class="token class-name">String</span> returnUrl<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token comment">// 把登录前的页面地址，记录到登录页面，以备将来登录成功，回到登录前的页面</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;returnUrl&quot;</span><span class="token punctuation">,</span> returnUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span>
            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;loginName&quot;</span><span class="token punctuation">)</span><span class="token class-name">String</span> loginName<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token class-name">String</span> password<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;returnUrl&quot;</span><span class="token punctuation">)</span><span class="token class-name">String</span> returnUrl<span class="token punctuation">,</span>
            <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response
    <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>authService<span class="token punctuation">.</span><span class="token function">accredit</span><span class="token punctuation">(</span>loginName<span class="token punctuation">,</span> password<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 登录成功重定向到登录前页面</span>
        <span class="token keyword">return</span> <span class="token string">&quot;redirect:&quot;</span> <span class="token operator">+</span> returnUrl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-2-authservice" tabindex="-1"><a class="header-anchor" href="#_5-2-2-authservice" aria-hidden="true">#</a> 5.2.2. AuthService</h3><p>在gmall-auth：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">JwtProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">GmallUmsClient</span> umsClient<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JwtProperties</span> jwtProperties<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accredit</span><span class="token punctuation">(</span><span class="token class-name">String</span> loginName<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 1. 完成远程请求，获取用户信息</span>
            <span class="token class-name">ResponseVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> userEntityResponseVo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>umsClient<span class="token punctuation">.</span><span class="token function">queryUser</span><span class="token punctuation">(</span>loginName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">UserEntity</span> userEntity <span class="token operator">=</span> userEntityResponseVo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 2. 判断用户信息是否为空</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>userEntity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserException</span><span class="token punctuation">(</span><span class="token string">&quot;用户名或者密码有误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 3. 把用户id及用户名放入载荷</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> userEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> userEntity<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 4. 为了防止jwt被别人盗取，载荷中加入用户ip地址</span>
            <span class="token class-name">String</span> ipAddress <span class="token operator">=</span> <span class="token class-name">IpUtil</span><span class="token punctuation">.</span><span class="token function">getIpAddress</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;ip&quot;</span><span class="token punctuation">,</span> ipAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 5. 制作jwt类型的token信息</span>
            <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jwtProperties<span class="token punctuation">.</span><span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jwtProperties<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 6. 把jwt放入cookie中</span>
            <span class="token class-name">CookieUtil</span><span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jwtProperties<span class="token punctuation">.</span><span class="token function">getCookieName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jwtProperties<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 7.用户昵称放入cookie中，方便页面展示昵称</span>
            <span class="token class-name">CookieUtil</span><span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jwtProperties<span class="token punctuation">.</span><span class="token function">getUnick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userEntity<span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jwtProperties<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserException</span><span class="token punctuation">(</span><span class="token string">&quot;用户名或者密码出错！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-3-gmallumsclient" tabindex="-1"><a class="header-anchor" href="#_5-2-3-gmallumsclient" aria-hidden="true">#</a> 5.2.3. GmallUmsClient</h3><p>接下来我们肯定要对用户密码进行校验，所以我们需要通过FeignClient去访问 ums-service微服务：</p><p>在gmall-auth中引入gmall-ums-interface依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gmall-ums-interface<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写GmallUmsClient：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;ums-service&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GmallUmsClient</span> <span class="token keyword">extends</span> <span class="token class-name">GmallUmsApi</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-4-测试" tabindex="-1"><a class="header-anchor" href="#_5-2-4-测试" aria-hidden="true">#</a> 5.2.4. 测试</h3><p>此时，在登录页面输入正确的用户名和密码信息，可以登录成功并跳转到首页：</p><p>但是查看cookie信息发现cookie为空。</p><p>再查看Headers中的Set-Cookie信息中的Domain发现是ip地址，不是地址栏的域名。</p>`,22),en={href:"http://www.gmall.com",target:"_blank",rel:"noopener noreferrer"},on=p(`<p>兄弟之间不能操作cookie。导致cookie没有写入成功！</p><p>为什么是Set-Cookie的Domain是IP地址？</p><h2 id="_5-3-解决cookie写入问题" tabindex="-1"><a class="header-anchor" href="#_5-3-解决cookie写入问题" aria-hidden="true">#</a> 5.3. 解决cookie写入问题</h2><p>解决cookie写入问题，要注意两点：</p><ol><li>cookie中的domain域必须和地址栏（或者是父域名）一致。</li><li>cors跨域满足携带cookie的生效条件 <ul><li>服务的响应头中需要携带Access-Control-Allow-Credentials并且为true。（网关中已设置）</li><li>响应头中的Access-Control-Allow-Origin一定不能为*，必须是指定的域名。（网关中已设置具体域名）</li><li>浏览器发起ajax需要指定withCredentials 为true。（前端工程：gmall-admin\\src\\utils\\httpRequest.js文件已经设置）</li></ul></li></ol><h3 id="_5-3-1-跟踪cookieutils" tabindex="-1"><a class="header-anchor" href="#_5-3-1-跟踪cookieutils" aria-hidden="true">#</a> 5.3.1. 跟踪CookieUtils</h3><p>在gmall-auth中AuthController的authentication方法打一个断点：</p><p>F7进入setCookie方法：</p><p>发现它调用了重载的setCookie方法，再次F7：</p><p>142行可以发现获取domian域并设置domain域。F7进入getDomainName方法，查看最终获取的domain是什么</p><p>160行获取的serverName是ip地址。也就是说这时候只能获取ip地址了，获取不到域名信息。</p><h3 id="_5-3-2-domain地址变化原因" tabindex="-1"><a class="header-anchor" href="#_5-3-2-domain地址变化原因" aria-hidden="true">#</a> 5.3.2. domain地址变化原因</h3><p>那么问题来了：为什么我们这里的请求serverName变成了pi地址了呢？</p><p>这是因为在地址栏输入域名时，经过了两次转发：</p><ul><li>我们使用了nginx反向代理，当监听到sso.gmall.com的时候，会自动将请求转发至代理ip地址，即gateway服务器地址。</li><li>而后请求到达我们的gateway网关，gateway网关就会根据路径匹配，我们的请求是/api/auth，根据规则被转发到了auth服务地址 ，即我们的授权中心。</li></ul><p>每次转发都会丢失域名信息。</p><h3 id="_5-3-3-nginx转发时要携带域名" tabindex="-1"><a class="header-anchor" href="#_5-3-3-nginx转发时要携带域名" aria-hidden="true">#</a> 5.3.3. nginx转发时要携带域名</h3><p>首先nginx转发请求给网关时，要携带域名信息。需要在nginx配置文件中配置代理头信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>proxy_set_header Host $host;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改完成之后，重新加载nginx配置：nginx -s reload</p><p>这样就解决了nginx转发时的域名问题。</p><h3 id="_5-3-4-网关转发时要携带域名" tabindex="-1"><a class="header-anchor" href="#_5-3-4-网关转发时要携带域名" aria-hidden="true">#</a> 5.3.4. 网关转发时要携带域名</h3><p>在网关转发请求给服务时，要携带地址信息：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.gateway.x-forwarded.host-enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改之后再次重启，测试</p><p>发现serverName依然时ip地址。</p><p>这是因为网关转发后，会把域名通过X-Forwarded-Host头信息转发给服务。所以，需要修改160行的代码，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> serverName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;X-Forwarded-Host&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-3-5-再次登录测试" tabindex="-1"><a class="header-anchor" href="#_5-3-5-再次登录测试" aria-hidden="true">#</a> 5.3.5. 再次登录测试</h3><p>完美！！！！！</p><h2 id="_5-4-公共页头显示用户名" tabindex="-1"><a class="header-anchor" href="#_5-4-公共页头显示用户名" aria-hidden="true">#</a> 5.4. 公共页头显示用户名</h2><p>js实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script th<span class="token operator">:</span>inline<span class="token operator">=</span><span class="token string">&quot;javascript&quot;</span><span class="token operator">&gt;</span>
    <span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#header&#39;</span><span class="token punctuation">,</span>

        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">keyword</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>searchParam<span class="token operator">?.</span>keyword<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">nickName</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// debugger</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>auth<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>nickName <span class="token operator">=</span> auth<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>

            <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyword <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
                window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;http://search.gmall.com/search?keyword=&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyword
            <span class="token punctuation">}</span><span class="token punctuation">,</span>

            <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;http://sso.gmall.com/toLogin.html?returnUrl=&#39;</span><span class="token operator">+</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href
            <span class="token punctuation">}</span><span class="token punctuation">,</span>

            <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//debugger</span>
                auth<span class="token punctuation">.</span><span class="token function">removeToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                auth<span class="token punctuation">.</span><span class="token function">removeUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

                <span class="token comment">//跳转页面</span>
                window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1>6. 网关过滤器验证登录状态</h1><p>gateway网关过滤器包含两种：<strong>全局过滤器</strong>和<strong>局部过滤器</strong>。</p><h2 id="_6-1-自定义全局过滤器" tabindex="-1"><a class="header-anchor" href="#_6-1-自定义全局过滤器" aria-hidden="true">#</a> 6.1. 自定义全局过滤器</h2><p>自定义全局过滤器非常简单：实现GlobalFilter接口即可，无差别拦截所有微服务的请求</p><p>内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGatewayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无需配置，拦截所有经过网关的请求！！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 放行</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 通过实现Orderer接口的getOrder方法控制全局过滤器的执行顺序
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-2-自定义局部过滤器" tabindex="-1"><a class="header-anchor" href="#_6-2-自定义局部过滤器" aria-hidden="true">#</a> 6.2. 自定义局部过滤器</h2><p>自定义局部过滤器稍微麻烦一点：</p><ol><li>需要编写过滤器工厂类继承AbstractGatewayFilterFactory抽象类</li><li>在需要过滤的微服务路由中配置该过滤器</li></ol><p>可以做到定点拦截。</p><h3 id="_6-2-1-过滤器工厂authgatewayfilterfactory" tabindex="-1"><a class="header-anchor" href="#_6-2-1-过滤器工厂authgatewayfilterfactory" aria-hidden="true">#</a> 6.2.1. 过滤器工厂AuthGatewayFilterFactory</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Object</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现GatewaFilter接口</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;自定义过滤器！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 放行</span>
                <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-2-在配置文件中使用" tabindex="-1"><a class="header-anchor" href="#_6-2-2-在配置文件中使用" aria-hidden="true">#</a> 6.2.2. 在配置文件中使用</h3><p>现在拿gmall-auth工程尝试使用吧</p><p>过滤器名称就是<code>Auth</code>，即自定义过滤器工厂<code>类名称</code> 去掉 <code>GatewayFilterFactory</code></p><h3 id="_6-2-3-读取过滤器配置内容" tabindex="-1"><a class="header-anchor" href="#_6-2-3-读取过滤器配置内容" aria-hidden="true">#</a> 6.2.3. 读取过滤器配置内容</h3><p>此时，虽然可以使用这个拦截器了，但是我们的拦截器还是光秃秃的，不能指定内容。</p><p>如果像下面一样指定<code>拦截路径</code>，并在过滤器中获取<code>拦截路径</code>，再去判断当前路径是否需要拦截</p><p>假设如下：</p><p>改造AuthGatewayFilterFactory过滤器工厂类如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthGatewayFilterFactory<span class="token punctuation">.</span>PathConfig</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 一定要重写构造方法
     * 告诉父类，这里使用PathConfig对象接收配置内容
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">AuthGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">PathConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">PathConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现GatewaFilter接口</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;自定义过滤器！&quot;</span> <span class="token operator">+</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 放行</span>
                <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 指定字段顺序
     * 可以通过不同的字段分别读取：/toLogin.html,/login
     * 在这里希望通过一个集合字段读取所有的路径
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">shortcutFieldOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;authPaths&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 指定读取字段的结果集类型
     * 默认通过map的方式，把配置读取到不同字段
     *  例如：/toLogin.html,/login
     *      由于只指定了一个字段，只能接收/toLogin.html
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ShortcutType</span> <span class="token function">shortcutType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ShortcutType</span><span class="token punctuation">.</span><span class="token constant">GATHER_LIST</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 读取配置的内部类
     */</span>
    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PathConfig</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> authPaths<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试效果如下：已经可以拿到配置内容</p><h2 id="_6-3-通过自定义局部过滤器完成登录验证" tabindex="-1"><a class="header-anchor" href="#_6-3-通过自定义局部过滤器完成登录验证" aria-hidden="true">#</a> 6.3. 通过自定义局部过滤器完成登录验证</h2><p>接下来，我们在gmall-gateway编写过滤器，对用户的token进行校验，如果发现未登录，则进行拦截。</p><p>思路：</p><ol><li>判断请求路径在不在拦截名单中，不在直接放行</li><li>获取请求中的token。同步请求从cookie中获取，异步请求从header中获取（走cookie太重，一个网站往往有很多cookie，如果通过携带cookie的方式传递token，网络传输压力太大）</li><li>判断token是否为空。为空直接拦截</li><li>如果不为空，解析jwt获取登录信息</li><li>判断是否被盗用。通过登录信息中的ip和当前请求的ip比较</li><li>传递登录信息给后续服务。后续各服务就不用再去解析了</li><li>放行</li></ol><h3 id="_6-3-1-引入jwt相关配置" tabindex="-1"><a class="header-anchor" href="#_6-3-1-引入jwt相关配置" aria-hidden="true">#</a> 6.3.1. 引入jwt相关配置</h3><p>既然是登录拦截，一定需要公钥解析jwt，我们在<code>gmall-gateway</code>中配置。</p><p>首先在pom.xml中，引入所需要的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gmall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后编写application.yml属性文件，添加如下内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">auth</span><span class="token punctuation">:</span>
  <span class="token key atrule">jwt</span><span class="token punctuation">:</span>
    <span class="token key atrule">pubKeyPath</span><span class="token punctuation">:</span> D<span class="token punctuation">:</span>\\\\project\\\\rsa\\\\rsa.pub <span class="token comment"># 公钥地址</span>
    <span class="token key atrule">cookieName</span><span class="token punctuation">:</span> GMALL<span class="token punctuation">-</span>TOKEN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写属性类，读取公钥：</p><p>jwtProperties内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;auth.jwt&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> pubKeyPath<span class="token punctuation">;</span><span class="token comment">// 公钥</span>

    <span class="token keyword">private</span> <span class="token class-name">PublicKey</span> publicKey<span class="token punctuation">;</span> <span class="token comment">// 公钥</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> cookieName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取公钥和私钥</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>publicKey <span class="token operator">=</span> <span class="token class-name">RsaUtils</span><span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span>pubKeyPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;初始化公钥失败！&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-2-编写代码实现登录拦截" tabindex="-1"><a class="header-anchor" href="#_6-3-2-编写代码实现登录拦截" aria-hidden="true">#</a> 6.3.2. 编写代码实现登录拦截</h3><p>改造AuthGatewayFilterFactory</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">JwtProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthGatewayFilterFactory<span class="token punctuation">.</span>PathConfig</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JwtProperties</span> properties<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 一定要重写构造方法
     * 告诉父类，这里使用PathConfig对象接收配置内容
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">AuthGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">PathConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">PathConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现GatewaFilter接口</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token comment">// 获取request和response，注意：不是HttpServletRequest及HttpServletResponse</span>
                <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 获取当前请求的path路径</span>
                <span class="token class-name">String</span> path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 1.判断请求路径在不在拦截名单中，不在直接放行</span>
                <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> authPath <span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token function">getAuthPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果白名单中有一个包含当前路径</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>authPath<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 不在拦截名单中，放行</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 2.获取请求中的token</span>
                <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
                <span class="token comment">// 异步请求，通过头信息获取token</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tokenList <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tokenList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    token <span class="token operator">=</span> tokenList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 同步请求通过cookie</span>
                    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HttpCookie</span><span class="token punctuation">&gt;</span></span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>cookies<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getCookieName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 拦截</span>
                        <span class="token comment">// 重定向到登录</span>
                        <span class="token comment">// 303状态码表示由于请求对应的资源存在着另一个URI，应使用重定向获取请求的资源</span>
                        response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">SEE_OTHER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">LOCATION</span><span class="token punctuation">,</span> <span class="token string">&quot;http://sso.gmall.com/toLogin.html?returnUrl=&quot;</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 设置响应状态码为未认证</span>
<span class="token comment">//                        response.setStatusCode(HttpStatus.UNAUTHORIZED);</span>
                        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// 获取cookie中的jwt</span>
                    <span class="token class-name">HttpCookie</span> cookie <span class="token operator">=</span> cookies<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getCookieName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    token <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 3.判断token是否为空</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 去登录</span>
                    response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">SEE_OTHER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">LOCATION</span><span class="token punctuation">,</span> <span class="token string">&quot;http://sso.gmall.com/toLogin.html?returnUrl=&quot;</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 4.解析jwt，获取登录信息</span>
                    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">getInfoFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">// 5.判断token是否被盗用</span>
                    <span class="token class-name">String</span> ip <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;ip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 当前请求的ip</span>
                    <span class="token class-name">String</span> curIp <span class="token operator">=</span> <span class="token class-name">IpUtil</span><span class="token punctuation">.</span><span class="token function">getIpAddressAtGateway</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> curIp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token comment">// 去登陆</span>
                        response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">SEE_OTHER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">LOCATION</span><span class="token punctuation">,</span> <span class="token string">&quot;http://sso.gmall.com/toLogin.html?returnUrl=&quot;</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// 6.传递登录信息给后续服务</span>
                    <span class="token class-name">String</span> userId <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 将userId转变成request对象。mutate：转变的意思</span>
                    request<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    exchange<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">// 放行</span>
                    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 7.异常，去登录</span>
                    response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">SEE_OTHER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">LOCATION</span><span class="token punctuation">,</span> <span class="token string">&quot;http://sso.gmall.com/toLogin.html?returnUrl=&quot;</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 指定字段顺序
     * 可以通过不同的字段分别读取：/toLogin.html,/login
     * 在这里希望通过一个集合字段读取所有的路径
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">shortcutFieldOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;authPaths&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 指定读取字段的结果集类型
     * 默认通过map的方式，把配置读取到不同字段
     *  例如：/toLogin.html,/login
     *      由于只指定了一个字段，只能接收/toLogin.html
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ShortcutType</span> <span class="token function">shortcutType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ShortcutType</span><span class="token punctuation">.</span><span class="token constant">GATHER_LIST</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 读取配置的内部类
     */</span>
    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PathConfig</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> authPaths<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-3-配置过滤器并测试" tabindex="-1"><a class="header-anchor" href="#_6-3-3-配置过滤器并测试" aria-hidden="true">#</a> 6.3.3. 配置过滤器并测试</h3><p>在网关配置文件中的配置如下：</p>`,73),cn={href:"http://sso.gmall.com/xxx",target:"_blank",rel:"noopener noreferrer"},ln=n("p",null,"重定向到了登录页面",-1),un=n("p",null,"输入用户名及密码登录后",-1),kn=n("p",null,"出现404，说明登录情况下网关放行了，由于没有该路径对应的接口，所有出现了404",-1),rn=n("h2",{id:"_6-4-常见异常解决",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-4-常见异常解决","aria-hidden":"true"},"#"),s(" 6.4. 常见异常解决")],-1),dn=n("p",null,"如果网关报如下错误：",-1),vn=n("p",null,"原因：springCloud-gateway内部集成的是webflux而不是servlet，所以需要排除servlet相关的依赖。",-1),mn=n("p",null,"tomcat是servlet容器",-1);function bn(gn,hn){const a=i("ExternalLinkIcon");return o(),c("div",null,[l(" more "),k,r,d,v,m,b,g,n("table",null,[n("thead",null,[n("tr",null,[h,n("th",null,[n("a",y,[s("atguigu.com"),t(a)])]),n("th",null,[n("a",w,[s("sso.atguigu.com"),t(a)])]),n("th",null,[n("a",f,[s("order.atguigu.com"),t(a)])])])]),n("tbody",null,[n("tr",null,[n("td",null,[n("a",_,[s("atguigu.com"),t(a)])]),x,q,j]),n("tr",null,[n("td",null,[n("a",S,[s("sso.atguigu.com"),t(a)])]),C,P,A]),n("tr",null,[n("td",null,[n("a",F,[s("order.atguigu.com"),t(a)])]),U,I,E])])]),G,n("p",null,[s("访问："),n("a",O,[s("http://client.atguigu.com:8080/hello"),t(a)])]),R,n("p",null,[s("访问："),n("a",H,[s("http://client.atguigu.com:8080/hello"),t(a)])]),T,K,L,N,J,W,n("p",null,[s("在浏览器中访问："),n("a",M,[s("http://client.atguigu.com:8080/hello"),t(a)])]),D,V,n("p",null,[s("此时访问："),n("a",B,[s("http://client.atguigu.com:8080/hello1"),t(a)])]),X,n("p",null,[s("JWT，全称是Json Web Token， 是JSON风格轻量级的授权和身份认证规范，可实现无状态、分布式的Web应用授权；官网："),n("a",Z,[s("https://jwt.io"),t(a)])]),n("p",null,[s("GitHub上jwt的java客户端："),n("a",Y,[s("https://github.com/jwtk/jjwt"),t(a)])]),z,n("ul",null,[$,n("li",null,[s("不可逆加密，如MD5，SHA "),n("ul",null,[n("li",null,[s("基本原理：加密过程中不需要使用"),n("a",Q,[s("密钥"),t(a)]),s("，输入明文后由系统直接经过加密算法处理成密文，这种加密后的数据是无法被解密的，无法根据密文推算出明文。")])])])]),nn,n("p",null,[s("在nginx中添加："),n("a",sn,[s("sso.gmall.com"),t(a)])]),an,n("p",null,[s("在浏览器输入："),n("a",tn,[s("http://sso.gmall.com/toLogin.html?returnUrl=http://www.gmall.com"),t(a)])]),pn,n("p",null,[s("由于浏览器地址栏地址："),n("a",en,[s("http://www.gmall.com"),t(a)]),s("，而设置cookie的domain域是ip地址，相当于兄弟域名。")]),on,n("p",null,[s("在浏览器上访问："),n("a",cn,[s("http://sso.gmall.com/xxx"),t(a)])]),ln,un,kn,rn,dn,vn,mn])}const wn=e(u,[["render",bn],["__file","single-sign-on.html.vue"]]);export{wn as default};
