import{_ as t,V as l,W as p,a0 as i,X as n,Y as a,Z as o,$ as s,G as c}from"./framework-ed4f969a.js";const u="/assets/true-image-20220824133337501-17d1bbe2.png",r="/assets/true-image-20220824135952614-ae7d836d.png",d="/assets/true-image-20220824140027802-cc8c8562.png",k="/assets/true-image-20220824140043625-d12a4f7f.png",m="/assets/true-image-20220824140100981-581e4ed9.png",v="/assets/true-image-20220824140111085-1a1d2e55.png",b="/assets/true-image-20220824140129441-54d0211e.png",y={},g=s('<h1>k8s-Pod-yaml篇</h1><h2 id="_1、pod-整体结构" tabindex="-1"><a class="header-anchor" href="#_1、pod-整体结构" aria-hidden="true">#</a> 1、Pod 整体结构</h2><p>Pod YAML的整体结构，可以初步分为 <strong>Resource(资源)、Object(元数据)、Spec(规范)、Status(状态)</strong>。</p><p><img src="'+u+'" alt=""></p><ul><li><strong>Resource</strong>：定义资源类型与版本， 作为从Rest API中获取资源必带的属性。</li><li><strong>Object</strong>：资源的元数据属性，明确资源的基本标识。</li><li><strong>Spec / Status</strong>：</li><li><ul><li><em>Spec</em>：定义资源的期望状态，包括用户提供的配置、系统扩展的默认值，以及周边系统初始化或者更改值（scheduler、hpa等）。</li></ul></li><li><ul><li><em>Status</em>：定义资源的当前状态，从而基于Spec定义的申明式配置，使pod不断朝期望状态靠近。</li></ul></li></ul><h2 id="_2、resource-资源-rest-api" tabindex="-1"><a class="header-anchor" href="#_2、resource-资源-rest-api" aria-hidden="true">#</a> 2、Resource（资源）- Rest API</h2><p><img src="'+r+`" alt=""></p><p>K8s 资源按照 Scope 可以分为 Namespace 资源、Cluster 资源，Namespace 在 K8s 可以认为是软租户的效果，实现资源层面的隔离， Pod 资源就是属于 Namespace 资源，而 Namespace 不光体现在 YAML 参数中，也表现在 K8s Rest API 中。</p><p>Rest API的整体结构，以Pod举例</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>pod
<span class="token key atrule">namespace</span><span class="token punctuation">:</span> default
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上述YAML，可以明确出 namespace 为default， name 为 test-pod 的 Pod 资源对象，也就是明确出Pod为Namespace资源， 该Pod资源对象对应的apiVersion为v1，后续 K8s 自内联相关的 Group为/api，自然而然，我们就将该对象的数据分离出来了：</p><ul><li><strong>group：api</strong></li><li><strong>apiVersion：v1</strong></li><li><strong>kind：Pod</strong></li><li><strong>name：test-pod</strong></li><li><strong>namespace：default</strong></li></ul><p>基于上述的数据展示，apiserver 自然而然会相应的注册出下列 rest api，</p><ul><li><code>/api/{apiVersion}/{kind}</code> ：该kind下的所有资源列表</li><li><code>/api/{apiVersion}/namespace/{namespace}/{kind}/</code> ：该kind下当前namespace的所有资源列表</li><li><code>/api/{apiVersion}/namespace/{namespace}/{kind}/{name}</code> ：该kind下当前namespace且名为name的资源</li><li><code>/api/{apiVersion}/namespace/{namespace}/{kind}/{name}/{subresource}</code> ：该kind下当前namespace且名为name的资源下子资源操作</li></ul><p>后续基于扩展，我们就需要明确出method，这样一个真正完整的Rest API就诞生了。</p><h2 id="_3、object-元数据" tabindex="-1"><a class="header-anchor" href="#_3、object-元数据" aria-hidden="true">#</a> 3、Object（元数据）</h2><p>在rest api中明确了Resource的kind、apiVersion， 也确定了Object的namespace、name，作为凡是k8s资源对象都会引用的公共结构， 自然也存在很多公共机制供使用。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">alibabacloud.com/owner</span><span class="token punctuation">:</span> testdemo
    <span class="token key atrule">k8s.aliyun.com/pod-eni</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span>
  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">&quot;2022-06-02T07:21:36Z&quot;</span>
  <span class="token key atrule">deleteTimestamp</span><span class="token punctuation">:</span> <span class="token string">&quot;2022-06-02T07:22:51Z&quot;</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> taihao<span class="token punctuation">-</span>app<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>shanghai<span class="token punctuation">-</span>pre<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>resource
    <span class="token key atrule">pod-template-hash</span><span class="token punctuation">:</span> 5bbb759f78
  <span class="token key atrule">name</span><span class="token punctuation">:</span> testdemo<span class="token punctuation">-</span>5bbb759f78<span class="token punctuation">-</span>27v88
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default
  <span class="token key atrule">ownerReferences</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
    <span class="token key atrule">blockOwnerDeletion</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">controller</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">kind</span><span class="token punctuation">:</span> ReplicaSet
    <span class="token key atrule">name</span><span class="token punctuation">:</span> testdemo<span class="token punctuation">-</span>5bbb759f78
    <span class="token key atrule">uid</span><span class="token punctuation">:</span> 9c3f268a<span class="token punctuation">-</span>c0d1<span class="token punctuation">-</span>4038<span class="token punctuation">-</span>bb2b<span class="token punctuation">-</span>b92928f45e3d
  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">&quot;60166035&quot;</span>
  <span class="token key atrule">uid</span><span class="token punctuation">:</span> e4236960<span class="token punctuation">-</span>8be2<span class="token punctuation">-</span>41bf<span class="token punctuation">-</span>ac44<span class="token punctuation">-</span>e7460378afbb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察上述YAML，我们将其整理一下，有这样一些字段:</p>`,19),h=s("<li><strong>namespace</strong>：常规来说，Namespace资源才会使用该资源对象</li><li><strong>name</strong>：代表资源实例名称</li><li><strong>uid</strong>：是资源的唯一标识，可以区别已删除与重新创建的同名资源实例</li><li><strong>resourceVersion</strong>：是k8s的内部版本，具备时间属性，基于此就能明确该资源对是什么时候发生改变的，也是保证k8s list-watch核心机制</li><li><strong>creationTimestamp</strong>: 资源实例创建时间</li><li><strong>deleteTimestamp</strong>: 资源实例删除时间，后续会在pod的生命周期内讲到对该字段应用</li><li><strong>ownerReferences</strong>: 资源从属对象，从上面yaml可知，该Pod资源从属于名为testdemo-5bb759f78，ownerReferences内部是没有namespace参数，也就是ownerReferences不允许跨namespace， 将资源由下到上能够建立起来</li><li><strong>labels</strong>：标签， k8s内的服务发现以及相应的软关联，都是围绕label运作的，比如testdemo-5bb759f78 replicaset 的labelselector（标签筛选器） 能够筛选到当前Pod的label，保证两者关联由上到下的建立</li>",8),P=n("strong",null,"annotations",-1),f={href:"http://xn--k8s-jn2em34ajxifyw.aliyun.com/pod-eni=%E2%80%9Dtrue%E2%80%9D%E6%98%AF%E6%8F%90%E4%BE%9B%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},T=s('<h3 id="label-selector" tabindex="-1"><a class="header-anchor" href="#label-selector" aria-hidden="true">#</a> label &amp; Selector</h3><p><img src="'+d+'" alt=""></p><p>Deployment 会根据自己的 <code>seletor：app=taihao-app-cluster</code> 以及计算出 podtemplate 的 hash lable：<code>pod-template-hash: 5b8b879786</code>， 筛选出符合的 replicaset，replicaset 再根据自己的selector 去筛选出符合的 pods， 相应的服务发现 service， 也是通过 selector 去筛选出符合的 Pod。</p><h3 id="owner-gc-垃圾回收" tabindex="-1"><a class="header-anchor" href="#owner-gc-垃圾回收" aria-hidden="true">#</a> Owner &amp; GC(垃圾回收)</h3><p><img src="'+k+`" alt=""></p><p>基于 Pod 的 metadata.ownerReferences 找寻到对应的 replicaset，replicaset 基于自身的 metadata.ownerReferences 找寻到 deploy； 当 deployment 被删除后，基于原有 owner 构建的树状，回收原有的rs与pod。</p><h3 id="deploy-replicaset" tabindex="-1"><a class="header-anchor" href="#deploy-replicaset" aria-hidden="true">#</a> Deploy &amp; Replicaset</h3><p>基于label&amp;labelselector，明确了从上到下的筛选归纳；基于owner&amp;GC，明确了关联资源的回收流程。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> ReplicaSet
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">generation</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> testdemo
    <span class="token key atrule">pod-template-hash</span><span class="token punctuation">:</span> bcd889947
  <span class="token key atrule">name</span><span class="token punctuation">:</span> testdemo<span class="token punctuation">-</span>bcd889947
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> taihao
  <span class="token key atrule">ownerReferences</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
    <span class="token key atrule">blockOwnerDeletion</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">controller</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
    <span class="token key atrule">name</span><span class="token punctuation">:</span> testdemo
    <span class="token key atrule">uid</span><span class="token punctuation">:</span> 1dddc849<span class="token punctuation">-</span>c254<span class="token punctuation">-</span>4cf5<span class="token punctuation">-</span>aec8<span class="token punctuation">-</span>9e1c2b5e65af
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> testdemo
      <span class="token key atrule">pod-template-hash</span><span class="token punctuation">:</span> bcd889947
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> testdemo
        <span class="token key atrule">pod-template-hash</span><span class="token punctuation">:</span> bcd889947
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">args</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token punctuation">-</span>c
        <span class="token punctuation">-</span> sleep 1000000
        <span class="token key atrule">command</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> sh
        <span class="token key atrule">image</span><span class="token punctuation">:</span> centos<span class="token punctuation">:</span><span class="token number">7</span>
        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent
        <span class="token key atrule">name</span><span class="token punctuation">:</span> testdemo
<span class="token key atrule">status</span><span class="token punctuation">:</span>
  <span class="token key atrule">fullyLabeledReplicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">observedGeneration</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>replicaset.spec.replicas</code>: 实例数，rs控制下的Pod个数</li><li><code>replicaset.spec.selector</code>：基于label 筛选出对应的Pod</li><li><code>replicaset.spec.template</code>：replicaset创建的Pod会基于podtemplate</li><li><code>replicaset.status</code>：replicaset 当前管理Pod的状态</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> testdemo
  <span class="token key atrule">name</span><span class="token punctuation">:</span> testdemo
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">revisionHistoryLimit</span><span class="token punctuation">:</span> <span class="token number">10</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> testdemo
  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>
    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span>
      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> 25%
      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> 25%
    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> testdemo
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">args</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token punctuation">-</span>c
            <span class="token punctuation">-</span> sleep 1000000
          <span class="token key atrule">command</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> sh
          <span class="token key atrule">image</span><span class="token punctuation">:</span> centos<span class="token punctuation">:</span><span class="token number">7</span>
          <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent
          <span class="token key atrule">name</span><span class="token punctuation">:</span> testdemo
<span class="token key atrule">status</span><span class="token punctuation">:</span>
  <span class="token key atrule">availableReplicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">observedGeneration</span><span class="token punctuation">:</span> <span class="token number">2</span>
  <span class="token key atrule">readyReplicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>
  <span class="token key atrule">unavailableReplicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">updatedReplicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>deploy.spec.replicas</code>: deploy期望的pod实例格式</li><li><code>deploy.spec.revisionHistoryLimit</code>：deploy 管理replicaset的保留三个月</li><li><code>deploy.spec.selector</code>：deploy 筛选符合标签</li><li><code>deploy.spec.strategy</code>：deploy的升级策略</li><li><code>deploy.template</code>：deploy基于此模版要创建的pod格式</li></ul><h2 id="_4、spec-规范" tabindex="-1"><a class="header-anchor" href="#_4、spec-规范" aria-hidden="true">#</a> 4、Spec（规范）</h2><p>Spec作为Pod的期望状态，一定程度上也覆盖了Pod完整生命周期的逻辑，Pod的生命周期分为以下阶段。</p><p><img src="`+m+'" alt=""></p><ul><li><strong>Pending</strong>：代表Pod处于未调度阶段</li><li><strong>Creating</strong>：节点上的kubelet已经发现了Pod，处于创建阶段</li><li><strong>Running</strong>：至少一个容器运行完毕，kubelet这会发起健康监测</li><li><strong>Terminating</strong>：Pod处于删除状态，kubelet开始回收容器</li><li><strong>Terminated</strong>: Pod 销毁完成</li></ul><h3 id="pod生命周期-pending" tabindex="-1"><a class="header-anchor" href="#pod生命周期-pending" aria-hidden="true">#</a> Pod生命周期: Pending</h3><p>Pod资源创建完毕后，处于还未调度阶段，这个时候scheduler（调度器）基于pod yaml本身的配置与节点资源状态情况，来进行调度。</p><p><img src="'+v+'" alt=""></p><p>scheduler 会去分析 podyaml，将其中的策略提取出来，与节点组中的节点配置进行匹配，若匹配成功后，会选出最佳节点，重新修改pod yaml， 将 spec.nodeName 更新掉，完成整个调度环节。</p><h3 id="资源策略" tabindex="-1"><a class="header-anchor" href="#资源策略" aria-hidden="true">#</a> 资源策略</h3><p>资源策略表明Pod运行需要的资源情况，以demo为例，Pod需要2核4G的资源，那么调度过去的节点也需要有2核4G的资源剩余，Pod才能运行在该节点上。</p><h3 id="节点标签筛选策略" tabindex="-1"><a class="header-anchor" href="#节点标签筛选策略" aria-hidden="true">#</a> 节点标签筛选策略</h3><p>节点标签筛选策略，筛选节点是否存在 <code>topology.kubernetes.io/region: cn-hangzhou</code></p><h3 id="亲和策略" tabindex="-1"><a class="header-anchor" href="#亲和策略" aria-hidden="true">#</a> 亲和策略</h3><p>亲和策略，有节点亲和与Pod亲和（Pod所在节点优先调度），常规来说可以优先满足亲和的节点上，当前例子就是节点亲和，满足标签<code>disk-type=aaa</code> 或者<code>disk-type=bbb</code></p><h3 id="pod生命周期-creating" tabindex="-1"><a class="header-anchor" href="#pod生命周期-creating" aria-hidden="true">#</a> Pod生命周期: Creating</h3><p>当Pod调度完毕后，开始创建阶段，kubelet会基于pod.spec 期望状态来创建出Pod</p><p>kubelet 在创建Pod阶段，总共大致经历以下过程</p><p><img src="'+b+`" alt=""></p><ul><li><strong>Group 配置</strong>：主要是为了容器配置cgroup，里面涉及了对容器资源限制，比如不允许超过cpu、memory配置，这里涉及到Pod的qos级别判定；</li><li><strong>初始化环境配置</strong>：主要是对相关 Pod 数据存储目录进行配置，涉及到 volume，则会去引用 CSI 协议，也会去获取镜像 secret，为了后续拉取镜像进行准备工作；</li><li><strong>创建 pause 容器</strong>：创建pause容器，该容器主要是为了后续配置容器网络，配置容器网络会去调用CNI；</li><li><strong>创建 Pod 容器</strong>：基于 imagesecret 拉取业务镜像，在创建Pod容器阶段，也会将相应的 Pod YAML 配置传输进去，在启动Pod容器完毕后，会基于poststart进行相关的回调。</li></ul><p>上述阶段，会选择部分关键概念进行详细说明</p><h3 id="image" tabindex="-1"><a class="header-anchor" href="#image" aria-hidden="true">#</a> image</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spec</span><span class="token punctuation">:</span>
<span class="token key atrule">containers</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> testdemo<span class="token punctuation">:</span>v1
  <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always
  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>config
  <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> image<span class="token punctuation">-</span>regsecret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>imagePullSecrets</strong>: 拉取镜像的密钥，保证能够拉取 <code>image：testdemo:v1</code>，尤其在镜像库是私有库的阶段</li><li><strong>imagePullPolicy</strong>：镜像拉取策略</li><li><ul><li><em>Always</em>：总是拉取镜像</li></ul></li><li><ul><li><em>IfNotPresent</em>：本地若有则使用本地镜像，不进行拉取</li></ul></li><li><ul><li><em>Never</em>：只使用本地镜像，不拉取</li></ul></li></ul><h3 id="containers" tabindex="-1"><a class="header-anchor" href="#containers" aria-hidden="true">#</a> containers</h3><p>注意这个 containers 用的是复数，可以填多个容器镜像: 比如可以放 nginx 和 业务容器。这样做的好处是可以尽量减少业务容器中与业务无关的代码或进程。</p><p>container 涉及很多配置，其中有涉及到 <code>volume</code>、<code>env</code>、<code>dnsconfig</code>、<code>host</code> 等基础配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">env</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> TZ
          <span class="token key atrule">value</span><span class="token punctuation">:</span> Asia/Shanghai
      <span class="token key atrule">image</span><span class="token punctuation">:</span> testdemo<span class="token punctuation">:</span>v1
      <span class="token key atrule">name</span><span class="token punctuation">:</span> taihao<span class="token punctuation">-</span>app<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>shanghai<span class="token punctuation">-</span>pre<span class="token punctuation">-</span>share
      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /home/admin
          <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>config
          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">dnsConfig</span><span class="token punctuation">:</span>
    <span class="token key atrule">nameservers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 100.100.1.1
      <span class="token punctuation">-</span> 100.100.2.1
    <span class="token key atrule">options</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ndots
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> timeout
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> attempts
        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>
    <span class="token key atrule">searches</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> default.svc.cluster.local
      <span class="token punctuation">-</span> svc.cluster.local
      <span class="token punctuation">-</span> cluster.local
  <span class="token key atrule">hostAliases</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">hostnames</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> kubernetes
        <span class="token punctuation">-</span> kubernetes.default
        <span class="token punctuation">-</span> kubernetes.default.svc
        <span class="token punctuation">-</span> kubernetes.default.svc.cluster.local
      <span class="token key atrule">ip</span><span class="token punctuation">:</span> 1.1.1.1
  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">configMap</span><span class="token punctuation">:</span>
        <span class="token key atrule">defaultMode</span><span class="token punctuation">:</span> <span class="token number">420</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>config
      <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>env</strong>：配置Pod的环境变量</li><li><strong>dnsConfig</strong>：配置Pod的域名解析</li><li><strong>hostALiases</strong>：配置/etc/hosts文件内容</li><li><strong>volume/volumeMount</strong>：配置文件挂载到容器内，也可以配置文件存储系统挂载到容器内</li></ul><h3 id="poststart" tabindex="-1"><a class="header-anchor" href="#poststart" aria-hidden="true">#</a> postStart</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> testdemo<span class="token punctuation">:</span>v1
    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always
    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>
      <span class="token key atrule">postStart</span><span class="token punctuation">:</span>
        <span class="token key atrule">exec</span><span class="token punctuation">:</span>
          <span class="token key atrule">command</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> /bin/sh
            <span class="token punctuation">-</span> <span class="token punctuation">-</span>c
            <span class="token punctuation">-</span> sleep 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前 poststart demo 是发起 command 命令，也可以发起 http 请求，主要作用可以作为资源部署以及环境准备。</p><h3 id="pod生命周期-running" tabindex="-1"><a class="header-anchor" href="#pod生命周期-running" aria-hidden="true">#</a> Pod生命周期: Running</h3><p>在 Pod running 阶段的时候，Pod 就迎来对其健康的检查，当前 kubelet 提供三种方式判定</p><ul><li><strong>readiness</strong>：检查Pod是否为健康</li><li><strong>liveness</strong>：件看 Pod 是否正常，若检查失败，则重启容器</li><li><strong>readinessGate</strong>：提供给第三方组件健康验证，第三方组件验证不过，则Pod不为健康</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">readinessGates</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">conditionType</span><span class="token punctuation">:</span> TestPodReady
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> testdemo<span class="token punctuation">:</span>v1
    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always
    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>
      <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">3</span>
      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">45</span>
      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
      <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>
      <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">3</span>
      <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>
        <span class="token key atrule">path</span><span class="token punctuation">:</span> /actuator/health
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8989</span>
        <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP
      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">25</span>
      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">3</span>
      <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>readiness 与 liveness 检查参数都是一致的</p><ul><li><strong>httpGet/tcpSocket</strong>：都是检查方式，一种是http请求验证，一种是tcpSocket，其中也有exec执行命令，以及grpc形式验证</li><li><strong>initialDelaySeconds</strong>：延迟多久开始检查，原因在于容器启动的时候，通常需要过段时间进行验证</li><li><strong>periodSeconds</strong>：检验时间周期</li><li><strong>failureThreshold</strong>：连续几次失败，则代表这轮检验失败</li><li><strong>successThreshold</strong>：连续几次成功，则代表这轮检验成功</li><li><strong>timeoutSeconds</strong> ：代表检验超时时间，若检验在该配置时间内没有返回，则认为检验失败</li></ul><p>readiness、liveness虽然参数不一样，但对检验的结果行为不一致。</p><ul><li><p><strong>readiness</strong> 默认状态下为false，也就是Pod为不健康，直到检查通过，才将Pod变为健康</p></li><li><p><strong>liveness</strong> 默认状态下为true，不会在刚开始就将Pod重启，只有等检查不通过后，才会进行容器重启操作</p></li><li><p><strong>readinessGate</strong> 是 Pod 健康的扩展，kubelet 会基于此，默认在 <code>pod.status.conditions</code> 上配置对应的 condition， 比如当前例子 readinessGate 为<code>conditionType: TestPodReady</code>，则相应就会有 conditions</p></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">status</span><span class="token punctuation">:</span>
  <span class="token key atrule">conditions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
      <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2022-07-05T09:16:07Z&quot;</span>
      <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;false&quot;</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> TestPodReady
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当该 condition.status 为 false 时，则 Pod 就会一直是不健康，哪怕 readiness 检查通过，直到第三方系统去操作更新 Pod 该 condition.status 为 true，才可以将 Pod 变为健康，这样就可以接入更多的 Pod 健康指标。</p><p>Pod生命周期: Terminating client 在发起请求删除Pod的时候，实际上是配置 pod.metadata.deletionTimestamp，kubelet 感知到后，开始进行 Pod 回收流程</p><p>整个 Pod 的回收周期，常规来说 preStop—&gt;SIGTERM—&gt;SIGKILL</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>
  <span class="token key atrule">preStop</span><span class="token punctuation">:</span>
    <span class="token key atrule">exec</span><span class="token punctuation">:</span>
      <span class="token key atrule">command</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /bin/sh
      <span class="token punctuation">-</span> <span class="token punctuation">-</span>c
      <span class="token punctuation">-</span> sleep 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 kubelet 进行 preStop 后，开始发起 SIGTERM 给容器内进程，若超过总默认耗时30S（metadata.DeletionGracePeriodSeconds），则强制发起 SIGKILL 给容器，也就是 prestop+SIGTERM 总耗时不允许超过30s。</p><h2 id="_5、status-状态" tabindex="-1"><a class="header-anchor" href="#_5、status-状态" aria-hidden="true">#</a> 5、Status（状态）</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">status</span><span class="token punctuation">:</span>
  <span class="token key atrule">conditions</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2022-07-05T09:16:07Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> TestPodReady
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2022-07-05T09:16:07Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> Initialized
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2022-07-05T09:16:14Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> Ready
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2022-07-05T09:16:14Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> ContainersReady
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2022-07-05T09:16:07Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;False&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> ContainerDiskPressure
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2022-07-05T09:16:07Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> PodScheduled
  <span class="token key atrule">containerStatuses</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">containerID</span><span class="token punctuation">:</span> containerd<span class="token punctuation">:</span>//xxxxx
    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/library/testdemo<span class="token punctuation">:</span>v1
    <span class="token key atrule">imageID</span><span class="token punctuation">:</span> docker.io/library/centos@sha256<span class="token punctuation">:</span>xxxx
    <span class="token key atrule">lastState</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> zxtest
    <span class="token key atrule">ready</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">restartCount</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">started</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">state</span><span class="token punctuation">:</span>
      <span class="token key atrule">running</span><span class="token punctuation">:</span>
        <span class="token key atrule">startedAt</span><span class="token punctuation">:</span> <span class="token string">&quot;2022-07-05T09:16:13Z&quot;</span>
  <span class="token key atrule">hostIP</span><span class="token punctuation">:</span> 21.1.96.23
  <span class="token key atrule">phase</span><span class="token punctuation">:</span> Running
  <span class="token key atrule">podIP</span><span class="token punctuation">:</span> 10.11.17.172
  <span class="token key atrule">podIPs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> 10.11.17.172
  <span class="token key atrule">qosClass</span><span class="token punctuation">:</span> Guaranteed
  <span class="token key atrule">startTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2022-07-05T09:16:07Z&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上述YAML样例，将Pod status状态拆建出来分析一下:</p><ul><li><strong>conditions</strong>: conditions是作为一种更详尽的状态报告，其本身也是一种扩展机制，其他的扩展字段也可以放入其中，比如可以表明网络状况，其中readinessGate就是这种扩展机制的表现，但决定Pod是否ready，永远只看type: Ready是否为true</li><li><strong>containerStatuses</strong>: Pod内各容器的状态</li><li><strong>hostIP</strong>: Pod所在节点ip地址</li><li><strong>phase</strong>: Pod的生命周期状态</li><li><ul><li><em>Pending</em>：代表Pod有一个容器或者多个容器还未运行，其中包括Pod调度到节点之前以及拉取镜像</li></ul></li><li><ul><li><em>Running</em>：代表Pod已绑定到节点上，至少有一个容器运行或在重启</li></ul></li><li><ul><li><em>Successed</em>：代表Pod所有容器已终止</li></ul></li><li><ul><li><em>Failed</em>：代表Pod内至少有一个容器终止失败</li></ul></li><li><ul><li><em>Unknown</em>：代表无法获取Pod状态</li></ul></li><li><strong>podIP/podIPs</strong>：Pod的IP地址，假如有ipv4、ipv6，则可以在podIPs上配置</li><li><strong>qosClass</strong>：代表kubernetes服务等级</li><li><ul><li><em>Guaranteed</em>：resource.requests与resource.limits一致</li></ul></li><li><ul><li><em>Burstable</em>：resource.requests与resource.limits 不一致</li></ul></li><li><ul><li><em>BestEffort</em>：没有配置resource.requests与resource.limits</li></ul></li><li><strong>startTime</strong>：启动时间</li></ul><p>通过以上Pod四个部分拆解，我们基本搞清了一个Pod在k8s下“从哪里来”的这个问题。本系列的后续的文章会对“到哪里去”这个问题继续展开： Kubernetes的魅力在于不仅仅是拉起一个工作负载，而是能够召之即来挥之即去地编排海量工作负载。</p>`,62);function q(x,S){const e=c("ExternalLinkIcon");return l(),p("div",null,[i(" more "),g,n("ul",null,[h,n("li",null,[P,a(": 注释，通常来说会是作为额外字段供应给周边系统使用，"),n("a",f,[a("比如当前k8s.aliyun.com/pod-eni=”true”是提供网络系统使用"),o(e)])])]),T])}const R=t(y,[["render",q],["__file","pod-yaml.html.vue"]]);export{R as default};
