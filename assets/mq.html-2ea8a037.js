import{_ as n,V as s,W as c,a0 as d,X as e,Z as o,a1 as a,Y as r,$ as i,G as p}from"./framework-ed4f969a.js";const l="/assets/true-20170816171523564-99aad322.png",m={},h=e("h2",{id:"mq中间件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mq中间件","aria-hidden":"true"},"#"),r(" MQ中间件")],-1),g=i('<h2 id="总览" tabindex="-1"><a class="header-anchor" href="#总览" aria-hidden="true">#</a> 总览</h2><p><img src="'+l+'" alt=""></p><h2 id="概念定义" tabindex="-1"><a class="header-anchor" href="#概念定义" aria-hidden="true">#</a> 概念定义</h2><p><strong>Producer</strong> 消息生产者</p><p>​ <strong>Producer Group</strong> 生产者组，简单来说就是多个发送同一类消息的生产者称之为一个生产者组。在这里可以不用关心，只要知道有这么一个概念即可。</p><p><strong>Consumer</strong> 消息消费者，简单来说，消费 MQ 上的消息的应用程序就是消费者，至于消息是否进行逻辑处理，还是直接存储到数据库等取决于业务需要。</p><p>​ <strong>Consumer Group</strong> 消费者组</p><p><strong>Topic</strong> 是一种消息的逻辑分类，比如说你有订单类的消息，也有库存类的消息，那么就需要进行分类，一个是订单Topic 存放订单相关的消息，一个是库存 Topic 存储库存相关的消息。</p><p><strong>Message</strong> 是消息的载体。必须指定 topic，相当于寄信的地址。可选的 tag，以便消费端可以基于 tag 进行过滤消息。也可以添加额外的键值对，例如你需要一个业务 key 来查找 broker 上的消息，方便在开发过程中诊断问题。</p><p><strong>Tag</strong> 标签可以被认为是对 Topic 进一步细化。一般在相同业务模块中通过引入标签来标记不同用途的消息。</p><p><strong>Broker</strong> 接收来自生产者的消息，储存以及为消费者拉取消息的请求做好准备。</p><p><strong>Name Server</strong> 为 producer 和 consumer 提供路由信息。</p><h2 id="场景应用-解耦-流量控制" tabindex="-1"><a class="header-anchor" href="#场景应用-解耦-流量控制" aria-hidden="true">#</a> 场景应用：解耦，流量控制</h2><p>1.大多应用中，可通过消息服务中间件来提升系统 <strong>异步通信</strong>、<strong>扩展解耦能力</strong></p>',14);function u(_,f){const t=p("RouterLink");return s(),c("div",null,[d(" more "),h,e("ul",null,[e("li",null,[o(t,{to:"/middleware/mq/mq-active.html"},{default:a(()=>[r("active")]),_:1})]),e("li",null,[o(t,{to:"/middleware/mq/mq-rabbit.html"},{default:a(()=>[r("rabbit")]),_:1})]),e("li",null,[o(t,{to:"/middleware/mq/mq-rocket.html"},{default:a(()=>[r("rocket")]),_:1})])]),g])}const b=n(m,[["render",u],["__file","mq.html.vue"]]);export{b as default};
