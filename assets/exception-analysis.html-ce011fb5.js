import{_ as a,V as e,W as p,a0 as o,X as s,Y as t,Z as l,$ as c,G as r}from"./framework-ed4f969a.js";const u={},i=c(`<h1>Linux常见异常分析</h1><h2 id="_1-常用的-load-分析方法" tabindex="-1"><a class="header-anchor" href="#_1-常用的-load-分析方法" aria-hidden="true">#</a> 1 常用的 Load 分析方法</h2><h3 id="cpu高、load高" tabindex="-1"><a class="header-anchor" href="#cpu高、load高" aria-hidden="true">#</a> CPU高、Load高</h3><ul><li><p>通过 <code>top</code> 命令查找占用CPU最高的进程PID；</p></li><li><p>通过 <code>top -Hp PID</code> 查找占用CPU最高的线程TID;</p></li><li><p>对于java程序，使用 <code>jstack</code> 打印线程堆栈信息；</p></li><li><p>通过 <code>printf %x tid</code> 打印出最消耗CPU线程的十六进制；</p></li></ul><h3 id="cpu低、load高" tabindex="-1"><a class="header-anchor" href="#cpu低、load高" aria-hidden="true">#</a> CPU低、Load高</h3><p>产生的原因一句话总结就是：</p><p>等待磁盘I/O完成的进程过多，导致进程队列长度过大，但是CPU运行的进程却很少，这样就体现到负载过大了，cpu使用率低。</p><ul><li><p>通过 <code>top</code> 命令查看CPU等待IO时间，即 <code>%wa</code>；</p></li><li><p>通过 <code>iostat -d -x -m 1 10</code> 查看磁盘IO情况；(安装命令 <code>yum install -y sysstat</code>)</p></li><li><p>通过 <code>sar -n DEV 1 10</code> 查看网络IO情况；</p></li><li><p>通过如下命令查找占用IO的程序：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">-L</span> h o state,cmd  <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{if($1==&quot;R&quot;||$1==&quot;D&quot;){print $0}}&#39;</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-k</span> 1nr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-cpu高、load高情况分析" tabindex="-1"><a class="header-anchor" href="#_2-cpu高、load高情况分析" aria-hidden="true">#</a> 2 CPU高、Load高情况分析</h2><ul><li><p>使用vmstat 查看系统纬度的 CPU 负载；</p></li><li><p>使用 top 查看进程纬度的 CPU 负载；</p></li></ul><h3 id="_2-1-使用-vmstat-查看系统纬度的-cpu-负载" tabindex="-1"><a class="header-anchor" href="#_2-1-使用-vmstat-查看系统纬度的-cpu-负载" aria-hidden="true">#</a> 2.1 使用 vmstat 查看系统纬度的 CPU 负载</h3><p>可以通过 vmstat 从系统维度查看 CPU 资源的使用情况</p><p><strong>格式</strong> ：<code>vmstat -n 1 -n 1</code> 表示结果一秒刷新一次</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM-1-14-centos ~<span class="token punctuation">]</span><span class="token comment"># vmstat -n 1</span>
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   <span class="token function">free</span>   buff  cache    si   so    bi    bo   <span class="token keyword">in</span>   cs us sy <span class="token function">id</span>   wa st
 <span class="token number">1</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">250304</span> <span class="token number">163472</span> <span class="token number">2154300</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">1</span>    <span class="token number">16</span>    <span class="token number">0</span>    <span class="token number">4</span>  <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">98</span>   <span class="token number">0</span>  <span class="token number">0</span>
 <span class="token number">0</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">250412</span> <span class="token number">163472</span> <span class="token number">2154332</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>  <span class="token number">937</span> <span class="token number">1439</span>  <span class="token number">1</span>  <span class="token number">1</span> <span class="token number">99</span>   <span class="token number">0</span>  <span class="token number">0</span>
 <span class="token number">0</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">250428</span> <span class="token number">163472</span> <span class="token number">2154332</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">4</span>  <span class="token number">980</span> <span class="token number">1329</span>  <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">100</span>  <span class="token number">0</span>  <span class="token number">0</span>
 <span class="token number">0</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">250444</span> <span class="token number">163472</span> <span class="token number">2154332</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>  <span class="token number">854</span> <span class="token number">1227</span>  <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">99</span>   <span class="token number">0</span>  <span class="token number">0</span>
 <span class="token number">0</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">250444</span> <span class="token number">163472</span> <span class="token number">2154332</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">68</span>  <span class="token number">832</span> <span class="token number">1284</span>  <span class="token number">0</span>  <span class="token number">1</span> <span class="token number">99</span>   <span class="token number">1</span>  <span class="token number">0</span>
 <span class="token number">0</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">250016</span> <span class="token number">163472</span> <span class="token number">2154332</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span>  <span class="token number">929</span> <span class="token number">1389</span>  <span class="token number">1</span>  <span class="token number">1</span> <span class="token number">99</span>   <span class="token number">0</span>  <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结果中的主要数据列说明：</p><ul><li><strong>r</strong>：表示系统中 CPU 等待处理的线程。由于 CPU 每次只能处理一个线程，所以，该数值越大，通常表示系统运行越慢。</li><li><strong>b</strong>：表示阻塞的进程,这个不多说，进程阻塞，大家懂的。</li><li><strong>us</strong>：用户 CPU 时间，我曾经在一个做加密解密很频繁的服务器上，可以看到 us 接近100，r运行队列达到80(机器在做压力测试，性能表现不佳)。</li><li><strong>sy</strong>：系统 CPU 时间，如果太高，表示系统调用时间长，例如是 IO 操作频繁。</li><li><strong>wa</strong>：IO 等待消耗的 CPU 时间百分比。该值较高时，说明 IO 等待比较严重，这可能磁盘大量作随机访问造成的，也可能是磁盘性能出现了瓶颈。</li><li><strong>id</strong>：处于空闲状态的 CPU 时间百分比。如果该值持续为 0，同时 sy 是 us 的两倍，则通常说明系统则面临着 CPU 资源的短缺。</li></ul><p>常见问题及解决方法：</p><ul><li>如果 r 经常大于 4，且 id 经常少于 40，表示cpu的负荷很重。</li><li>如果 pi，po 长期不等于 0，表示内存不足。</li><li>如果 disk 经常不等于 0，且在b中的队列大于 3，表示io性能不好。</li></ul><h3 id="_2-2-使用-top-查看进程纬度的-cpu-负载" tabindex="-1"><a class="header-anchor" href="#_2-2-使用-top-查看进程纬度的-cpu-负载" aria-hidden="true">#</a> 2.2 使用 top 查看进程纬度的 CPU 负载</h3><p>可以通过 top 从进程纬度来查看其 CPU、内存等资源的使用情况。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">top</span> - <span class="token number">19</span>:49:59 up <span class="token number">36</span> days, <span class="token number">23</span>:15,  <span class="token number">3</span> users,  load average: <span class="token number">0.11</span>, <span class="token number">0.04</span>, <span class="token number">0.05</span>
Tasks: <span class="token number">133</span> total,   <span class="token number">1</span> running, <span class="token number">131</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">1</span> zombie
%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">3.1</span> us,  <span class="token number">3.1</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">93.8</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st
KiB Mem <span class="token builtin class-name">:</span>  <span class="token number">3880188</span> total,   <span class="token number">241648</span> free,  <span class="token number">1320424</span> used,  <span class="token number">2318116</span> buff/cache
KiB Swap:        <span class="token number">0</span> total,        <span class="token number">0</span> free,        <span class="token number">0</span> used.  <span class="token number">2209356</span> avail Mem 
  PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                               
 <span class="token number">1793</span> mysql     <span class="token number">20</span>   <span class="token number">0</span> <span class="token number">1608796</span> <span class="token number">236708</span>   <span class="token number">9840</span> S   <span class="token number">6.7</span>  <span class="token number">6.1</span>  <span class="token number">83</span>:36.23 /usr/sbin/mysqld                                    
    <span class="token number">1</span> root      <span class="token number">20</span>   <span class="token number">0</span>  <span class="token number">125636</span>   <span class="token number">3920</span>   <span class="token number">2444</span> S   <span class="token number">0.0</span>  <span class="token number">0.1</span>   <span class="token number">4</span>:34.13 /usr/lib/systemd/systemd                                 
    <span class="token number">2</span> root      <span class="token number">20</span>   <span class="token number">0</span>       <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span> S   <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">0</span>:00.90 <span class="token punctuation">[</span>kthreadd<span class="token punctuation">]</span>                                                                                            
    <span class="token number">4</span> root       <span class="token number">0</span> <span class="token parameter variable">-20</span>       <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span> S   <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">0</span>:00.00 <span class="token punctuation">[</span>kworker/0:0H<span class="token punctuation">]</span>                                                                                        
    <span class="token number">6</span> root      <span class="token number">20</span>   <span class="token number">0</span>       <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span> S   <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">0</span>:15.46 <span class="token punctuation">[</span>ksoftirqd/0<span class="token punctuation">]</span>                                                                                         
    <span class="token number">7</span> root      rt   <span class="token number">0</span>       <span class="token number">0</span>      <span class="token number">0</span>      <span class="token number">0</span> S   <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">0</span>:12.02 <span class="token punctuation">[</span>migration/0<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认界面上第三行会显示当前 CPU 资源的总体使用情况，下方会显示各个进程的资源占用情况。</p><p>可以直接在界面输入大小字母 P，来使监控结果按 CPU 使用率倒序排列，进而定位系统中占用 CPU 较高的进程。 最后，根据系统日志和程序自身相关日志，对相应进程做进一步排查分析，以判断其占用过高 CPU 的原因。</p><h2 id="_3-cpu低、load高" tabindex="-1"><a class="header-anchor" href="#_3-cpu低、load高" aria-hidden="true">#</a> 3 CPU低、Load高</h2><h3 id="问题描述" tabindex="-1"><a class="header-anchor" href="#问题描述" aria-hidden="true">#</a> 问题描述</h3><p>Linux 系统没有业务程序运行，通过 top 观察，类似如下图所示，CPU 很空闲，但是 <code>load average</code> 却非常高：</p><h3 id="问题分析" tabindex="-1"><a class="header-anchor" href="#问题分析" aria-hidden="true">#</a> 问题分析</h3><p>CPU低而负载高也就是说等待磁盘I/O完成的进程过多，就会导致队列长度过大，这样就体现到负载过大了，但实际是此时CPU被分配去执行别的任务或空闲，具体场景有如下几种：</p><blockquote><p><em>场景一</em>：磁盘读写请求过多就会导致大量I/O等待</p></blockquote><p>上面说过，cpu的工作效率要高于磁盘，而进程在cpu上面运行需要访问磁盘文件，这个时候cpu会向内核发起调用文件的请求，让内核去磁盘取文件，这个时候会切换到其他进程或者空闲， 这个任务就会转换为不可中断睡眠状态。当这种读写请求过多就会导致不可中断睡眠状态的进程过多，从而导致负载高，cpu低的情况。</p><blockquote><p><em>场景二</em>：MySQL中存在没有索引的语句或存在死锁等情况</p></blockquote><p>我们都知道MySQL的数据是存储在硬盘中，如果需要进行sql查询，需要先把数据从磁盘加载到内存中。当在数据特别大的时候，如果执行的sql语句没有索引，就会造成扫描表的行数过大导致I/O阻塞， 或者是语句中存在死锁，也会造成I/O阻塞，从而导致不可中断睡眠进程过多，导致负载过大。具体解决方法可以在MySQL中运行 <code>show full processlist</code> 命令查看线程等待情况，把其中的语句拿出来进行优化。</p><blockquote><p><em>场景三</em>：外接硬盘故障，常见有挂了NFS，但是NFS server故障</p></blockquote><p>比如我们的系统挂载了外接硬盘如NFS共享存储，经常会有大量的读写请求去访问NFS存储的文件，如果这个时候 NFS Server 故障，那么就会导致进程读写请求一直获取不到资源，从而进程一直是不可中断状态，造成负载很高。</p><h3 id="处理办法" tabindex="-1"><a class="header-anchor" href="#处理办法" aria-hidden="true">#</a> 处理办法</h3><ul><li>load average 是对 CPU 负载的评估，其值越高，说明其任务队列越长，处于等待执行的任务越多。</li><li>出现此种情况时，可能是由于僵死进程导致的。可以通过指令 <code>ps -axjf</code> 查看是否存在 D 状态进程。</li><li>D 状态是指不可中断的睡眠状态。该状态的进程无法被 kill，也无法自行退出。只能通过恢复其依赖的资源或者重启系统来解决。</li></ul><blockquote><p>等待 I/O 的进程通过处于 <code>uninterruptible sleep</code> 或 D 状态；通过给出这些信息我们就可以简单的查找出处在 wait 状态的进程。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">-L</span> h o state,cmd  <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{if($1==&quot;R&quot;||$1==&quot;D&quot;){print $0}}&#39;</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-k</span> 1nr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上内容来源于：</p>`,40),m={href:"https://juejin.cn/post/7016127914454286367",target:"_blank",rel:"noopener noreferrer"};function b(k,d){const n=r("ExternalLinkIcon");return e(),p("div",null,[o(" more "),i,s("ul",null,[s("li",null,[s("a",m,[t("Honest1y"),l(n)])])])])}const v=a(u,[["render",b],["__file","exception-analysis.html.vue"]]);export{v as default};
