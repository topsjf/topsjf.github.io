import{_ as t,V as d,W as o,a0 as c,X as e,Y as a,Z as s,a1 as p,$ as i,G as l}from"./framework-ed4f969a.js";const h="/assets/true-image-20220817182237396-d059f831.png",u="/assets/true-image-sql-joins-ac73066a.png",b="/assets/true-image-20220817182326432-a1a0726e.png",m="/assets/true-image-20220817182401910-7157a8b3.png",g="/assets/true-image-20220817182423185-47c8d4a3.png",v="/assets/true-image-20220817182457503-49a6a969.png",k="/assets/true-image-20220817182534167-239dc6d3.png",x="/assets/true-image-20220817182601302-3372d4ee.png",f="/assets/true-image-20220817182620388-67786cb1.png",y="/assets/true-image-20220817182637242-8bb320ea.png",_="/assets/true-image-20220817182702866-7b32bc63.png",w="/assets/true-image-20220817182724687-3975c463.png",q={},S=e("h1",null,"运维面试题总结",-1),C={href:"https://zhuanlan.zhihu.com/p/533165245?utm_id=0",target:"_blank",rel:"noopener noreferrer"},P=i('<h2 id="一、linux" tabindex="-1"><a class="header-anchor" href="#一、linux" aria-hidden="true">#</a> 一、linux</h2><h3 id="linux系统启动流程" tabindex="-1"><a class="header-anchor" href="#linux系统启动流程" aria-hidden="true">#</a> linux系统启动流程</h3><ul><li>第一步：开机自检，加载BIOS</li><li>第二步：读取ＭＢＲ</li><li>第三步：Boot Loader grub引导菜单</li><li>第四步：加载kernel内核</li><li>第五步：init进程依据inittab文件夹来设定运行级别</li><li>第六步：init进程执行<code>rc.sysinit</code></li><li>第七步：启动内核模块</li><li>第八步：执行不同运行级别的脚本程序</li><li>第九步：执行<code>/etc/rc.d/rc.lo</code></li></ul><h3 id="linux文件类型" tabindex="-1"><a class="header-anchor" href="#linux文件类型" aria-hidden="true">#</a> linux文件类型</h3><table><thead><tr><th>文件属性</th><th>文件类型</th></tr></thead><tbody><tr><td>-</td><td>常规文件，即file</td></tr><tr><td>d</td><td>目录文件</td></tr><tr><td>b</td><td>block device 即块设备文件，如硬盘;支持以block为单位进行随机访问</td></tr><tr><td>c</td><td>character device 即字符设备文件，如键盘支持以character为单位进行线性访问</td></tr><tr><td>l</td><td>symbolic link 即符号链接文件，又称软链接文件</td></tr><tr><td>p</td><td>pipe 即命名管道文件</td></tr><tr><td>s</td><td>socket 即套接字文件，用于实现两个进程进行通信</td></tr></tbody></table><h3 id="centos6和7怎么将源码安装的程序添加到开机自启动" tabindex="-1"><a class="header-anchor" href="#centos6和7怎么将源码安装的程序添加到开机自启动" aria-hidden="true">#</a> centos6和7怎么将源码安装的程序添加到开机自启动？</h3><p>通用方法：编辑<code>/etc/rc.d/rc.local</code>文件，在文件末尾添加启动服务命令</p><p><em>centos6</em></p><ul><li>① 进入到/etc/rc.d/init.d目录下；</li><li>② 新建一个服务启动脚本，脚本中指定chkconfig参数；</li><li>③ 添加执行权限；</li><li>④ 执行<code>chkconfig --add</code> 添加服务自启动；</li></ul><p><em>centos7</em></p><ul><li>① 进入到<code>/usr/lib/systemd/system</code>目录下；</li><li>② 新建自定义服务文件，文件中包含<code>[Unit]</code>、<code>[Service]</code>、<code>[Install]</code>相关配置，然后添加下执行权限；</li><li>③ 执行 <code>systemctl enable</code> 服务名称；</li></ul><h3 id="简述lvm-如何给使用lvm的-分区扩容" tabindex="-1"><a class="header-anchor" href="#简述lvm-如何给使用lvm的-分区扩容" aria-hidden="true">#</a> 简述lvm，如何给使用lvm的/分区扩容？</h3><p><strong>功能：可以对磁盘进行动态管理。动态按需调整大小概念：</strong></p><ul><li><p>① <em>PV-物理卷</em>：物理卷在逻辑卷管理中处于最底层，它可以是实际物理硬盘上的分区，也可以是整个物理硬盘，也可以是raid设备。</p></li><li><p>② <em>VG-卷组</em>：卷组建立在物理卷之上，一个卷组中至少要包括一个物理卷，在卷组建立之后可动态添加物理卷到卷组中。 一个逻辑卷管理系统工程中可以只有一个卷组，也可以拥有多个卷组。</p></li><li><p>③ <em>LV-逻辑卷</em>：逻辑卷建立在卷组之上，卷组中的未分配空间可以用于建立新的逻辑卷，逻辑卷建立后可以动态地扩展和缩小空间。 系统中的多个逻辑卷可以属于同一个卷组，也可以属于不同的多个卷组。</p><p><img src="'+h+'" alt=""></p></li></ul><p><strong>给/分区扩容步骤：</strong></p><ul><li>① 添加磁盘</li><li>② 使用<code>fdisk</code>命令对新增加的磁盘进行分区</li><li>③ 分区完成后修改分区类型为<code>lvm</code></li><li>④ 使用<code>pvcreate</code>创建物理卷</li><li>⑤ 使用<code>vgextend</code>命令将新增加的分区加入到根目录分区中</li><li>⑥ 使用<code>lvextend</code>命令进行扩容</li><li>⑦ 使用<code>xfs_growfs</code>调整卷分区大小</li></ul><h3 id="为何du和df统计结果不一致" tabindex="-1"><a class="header-anchor" href="#为何du和df统计结果不一致" aria-hidden="true">#</a> 为何du和df统计结果不一致？</h3><ul><li>用户删除了大量的文件被删除后，在文件系统目录中已经不可见了，所以du就不会再统计它。</li><li>然而如果此时还有运行的进程持有这个已经被删除的文件句柄，那么这个文件就不会真正在磁盘中被删除，分区超级块中的信息也就不会更改， df仍会统计这个被删除的文件。</li><li>可通过 lsof命令查询处于deleted状态的文件，被删除的文件在系统中被标记为deleted。如果系统有大量deleted状态的文件， 会导致du和df统计结果不一致。</li></ul><h3 id="如何升级内核" tabindex="-1"><a class="header-anchor" href="#如何升级内核" aria-hidden="true">#</a> 如何升级内核？</h3><p><em>方法一</em></p><ul><li>添加第三方yum源进行下载安装。</li></ul>',21),I={href:"http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm",target:"_blank",rel:"noopener noreferrer"},R={href:"http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm",target:"_blank",rel:"noopener noreferrer"},N=i(`<ul><li>先导入elrepo的key，然后安装elrepo的yum源：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> <span class="token parameter variable">-import</span> https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
<span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查看可用的内核相关包</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">--disablerepo</span><span class="token operator">=</span><span class="token string">&quot;*&quot;</span> <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span><span class="token string">&quot;elrepo-kernel&quot;</span> list available
yum <span class="token parameter variable">-y</span> <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span>elrepo-kernel <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>方法二</em></p><ul><li>通过下载kernel image的rpm包进行安装。</li></ul>`,6),D={href:"http://elrepo.org/linux/kernel/el6/x86_64/RPMS/",target:"_blank",rel:"noopener noreferrer"},L={href:"http://elrepo.org/linux/kernel/el7/x86_64/RPMS/",target:"_blank",rel:"noopener noreferrer"},V=i(`<ul><li>获取下载链接进行下载安装即可</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://elrepo.org/linux/kernel/el7/x86_64/RPMS/kernel-lt-4.4.185-1.el7.elrepo.x86_64.rpm

<span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> kernel-lt-4.4.185-1.el7.elrepo.x86_64.rp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查看默认启动顺序</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># awk -F\\&#39; &#39;$1==&quot;menuentry &quot; {print $2}&#39; /etc/grub2.cfg</span>
CentOS Linux <span class="token punctuation">(</span><span class="token number">5.2</span>.2-1.el7.elrepo.x86_64<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>
CentOS Linux <span class="token punctuation">(</span><span class="token number">4.4</span>.182-1.el7.elrepo.x86_64<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>
CentOS Linux <span class="token punctuation">(</span><span class="token number">3.10</span>.0-957.21.3.el7.x86_64<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>
CentOS Linux <span class="token punctuation">(</span><span class="token number">3.10</span>.0-957.10.1.el7.x86_64<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>
CentOS Linux <span class="token punctuation">(</span><span class="token number">3.10</span>.0-327.el7.x86_64<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>
CentOS Linux <span class="token punctuation">(</span><span class="token number">0</span>-rescue-e34fb4f1527b4f2d9fc75b77c016b6e7<span class="token punctuation">)</span> <span class="token number">7</span> <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>由上面可以看出新内核(4.12.4)目前位置在0，原来的内核(3.10.0)目前位置在1</p></blockquote><ul><li>设置默认启动</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># grub2-set-default 0 // 0代表当前第一行，也就是4.12.4版本</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>然后重启验证</li></ul><h3 id="nginx日志访问量前十的ip怎么统计" tabindex="-1"><a class="header-anchor" href="#nginx日志访问量前十的ip怎么统计" aria-hidden="true">#</a> nginx日志访问量前十的ip怎么统计？</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{array[$1]++}END{for (ip in array)print ip,array[ip]}&#39;</span> access.log <span class="token operator">|</span><span class="token function">sort</span> <span class="token parameter variable">-k2</span> -rn<span class="token operator">|</span><span class="token function">head</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如何删除-var-log-下-log结尾的30天前的日志" tabindex="-1"><a class="header-anchor" href="#如何删除-var-log-下-log结尾的30天前的日志" aria-hidden="true">#</a> 如何删除/var/log/下.log结尾的30天前的日志？</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> /var/log/ <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> .*.log <span class="token parameter variable">-mtime</span> <span class="token number">30</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ansible有哪些模块-功能是什么" tabindex="-1"><a class="header-anchor" href="#ansible有哪些模块-功能是什么" aria-hidden="true">#</a> ansible有哪些模块？功能是什么？</h3>`,13),E=i(`<table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>copy</td><td>拷贝文件到被控端</td></tr><tr><td>cron</td><td>定时任务</td></tr><tr><td>fetch</td><td>拷贝被控端文件到本地</td></tr><tr><td>file</td><td>文件模块</td></tr><tr><td>group</td><td>用户组模块</td></tr><tr><td>user</td><td>用户模块</td></tr><tr><td>hostname</td><td>主机名模块</td></tr><tr><td>script</td><td>脚本模块</td></tr><tr><td>service</td><td>服务启动模块</td></tr><tr><td>command</td><td>远程执行命令模块</td></tr><tr><td>shell</td><td>远程执行命令模块，command高级用法</td></tr><tr><td>yum</td><td>安装包组模块</td></tr><tr><td>setup</td><td>查看主机系统信息</td></tr></tbody></table><h3 id="nginx为什么比apache快" tabindex="-1"><a class="header-anchor" href="#nginx为什么比apache快" aria-hidden="true">#</a> nginx为什么比apache快？</h3><ul><li>nginx采用epoll模型</li><li>apache采用select模型</li></ul><h3 id="四层负载和七层负载区别是什么" tabindex="-1"><a class="header-anchor" href="#四层负载和七层负载区别是什么" aria-hidden="true">#</a> 四层负载和七层负载区别是什么？</h3><p>四层基于IP+端口进行转发</p><p>七层就是基于URL等应用层信息的负载均衡</p><h3 id="lvs有哪些工作模式-哪个性能高" tabindex="-1"><a class="header-anchor" href="#lvs有哪些工作模式-哪个性能高" aria-hidden="true">#</a> lvs有哪些工作模式？哪个性能高？</h3><ul><li>dr：直接路由模式，请求由 LVS 接受，由真实提供服务的服务器直接返回给用户，返回的时候不经过 LVS。（性能最高）</li><li>tun：隧道模式，客户端将访问vip报文发送给LVS服务器。LVS服务器将请求报文重新封装，发送给后端真实服务器。 后端真实服务器将请求报文解封，在确认自身有vip之后进行请求处理。后端真实服务器在处理完数据请求后，直接响应客户端。</li><li>nat：网络报的进出都要经过 LVS 的处理。LVS 需要作为 RS 的网关。当包到达 LVS 时，LVS 做目标地址转换（DNAT）， 将目标 IP 改为 RS 的 IP。RS 接收到包以后，仿佛是客户端直接发给它的一样。RS处理完，返回响应时，源 IP 是 RS IP， 目标 IP 是客户端的 IP。这时 RS 的包通过网关（LVS）中转，LVS 会做源地址转换（SNAT），将包的源地址改为 VIP，这样， 这个包对客户端看起来就仿佛是 LVS 直接返回给它的。客户端无法感知到后端 RS 的存在。</li><li>fullnat模式：fullnat模式和nat模式相似，但是与nat不同的是nat模式只做了两次地址转换，fullnat模式却做了四次。</li></ul><h3 id="tomcat各个目录含义-如何修改端口-如何修改内存数" tabindex="-1"><a class="header-anchor" href="#tomcat各个目录含义-如何修改端口-如何修改内存数" aria-hidden="true">#</a> tomcat各个目录含义，如何修改端口，如何修改内存数？</h3><ul><li>bin 存放tomcat命令</li><li>conf 存放tomcat配置文件</li><li>lib 存放tomcat运行需要加载的jar包</li><li>log 存放Tomcat运行产生的日志</li><li>temp 运行过程中产生的临时文件</li><li>webapps 站点目录</li><li>work 存放tomcat运行时的编译后的文件</li><li>conf/server.xml 修改端口号</li><li>bin/catalina.sh 修改jvm内存</li></ul><h3 id="nginx反向代理时-如何使后端获取真正的访问来源ip" tabindex="-1"><a class="header-anchor" href="#nginx反向代理时-如何使后端获取真正的访问来源ip" aria-hidden="true">#</a> nginx反向代理时，如何使后端获取真正的访问来源ip？</h3><p>在location配置段添加以下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>proxy_set_header Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nginx负载均衡算法有哪些" tabindex="-1"><a class="header-anchor" href="#nginx负载均衡算法有哪些" aria-hidden="true">#</a> nginx负载均衡算法有哪些？</h3><ul><li>rr 轮训</li><li>weight 加权轮训</li><li>ip_hash 静态调度算法</li><li>fair 动态调度算法</li><li>url_hash url哈希</li><li>leat_conn 最小连接数</li></ul><h3 id="如何进行压力测试" tabindex="-1"><a class="header-anchor" href="#如何进行压力测试" aria-hidden="true">#</a> 如何进行压力测试？</h3><p>例如：模拟10个用户，对百度首页发起总共100次请求。</p><p>测试命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ab <span class="token parameter variable">-n</span> <span class="token number">100</span> <span class="token parameter variable">-c</span> <span class="token number">10</span> https://www.baidu.com/index.htm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="curl命令如何发送https请求-如何查看response头信息-如何发送get和post表单信息" tabindex="-1"><a class="header-anchor" href="#curl命令如何发送https请求-如何查看response头信息-如何发送get和post表单信息" aria-hidden="true">#</a> curl命令如何发送https请求？如何查看response头信息？如何发送get和post表单信息？</h3><p>发送https请求：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">--tlsv1</span> <span class="token string">&#39;https://www.bitstamp.net/api/v2/transactions/btcusd/&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>response头信息 ：curl -I</li><li>get：curl 请求地址<code>?key1=value1&amp;key2=value2&amp;key3=value3</code></li><li>post：<code>curl -d “key1=value1&amp;key2=value2&amp;key3=value3”</code></li></ul><h2 id="二、mysql" tabindex="-1"><a class="header-anchor" href="#二、mysql" aria-hidden="true">#</a> 二、mysql</h2><h3 id="索引的为什么使查询加快-有啥缺点" tabindex="-1"><a class="header-anchor" href="#索引的为什么使查询加快-有啥缺点" aria-hidden="true">#</a> 索引的为什么使查询加快？有啥缺点？</h3><p>默认的方式是根据搜索条件进行全表扫描，遇到匹配条件的就加入搜索结果集合。 如果我们对某一字段增加索引，查询时就会先去索引列表中一次 定位到特定值的行数，大大减少遍历匹配的行数，所以能明显增加查询的速度</p><p><strong>缺点：</strong></p><ul><li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加</li><li>索引需要占物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间，如果需要建立聚簇索引，那么需要占用的空间会更大</li><li>以表中的数据进行增、删、改的时候，索引也要动态的维护，这就降低了整数的维护速度</li></ul><h3 id="sql语句左外连接-右外连接-内连接-全连接区别" tabindex="-1"><a class="header-anchor" href="#sql语句左外连接-右外连接-内连接-全连接区别" aria-hidden="true">#</a> sql语句左外连接 右外连接 内连接 全连接区别</h3><p><img src="`+u+`" alt=""></p><p><strong>简单的连接查询</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 2条数据(交集)</span>
<span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>id <span class="token keyword">FROM</span> a <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> b <span class="token keyword">ON</span> b<span class="token punctuation">.</span>a_id<span class="token operator">=</span>a<span class="token punctuation">.</span>id
<span class="token comment"># 4条数据</span>
<span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>id <span class="token keyword">FROM</span> a <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> b <span class="token keyword">ON</span> b<span class="token punctuation">.</span>a_id<span class="token operator">=</span>a<span class="token punctuation">.</span>id
<span class="token comment"># 2条数据</span>
<span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span>b<span class="token punctuation">.</span>id <span class="token keyword">FROM</span> a <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> b <span class="token keyword">ON</span> b<span class="token punctuation">.</span>a_id<span class="token operator">=</span>a<span class="token punctuation">.</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>合并查询</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> e_job<span class="token operator">=</span><span class="token string">&#39;MANAGER&#39;</span>  
<span class="token keyword">union</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> e_job<span class="token operator">=</span><span class="token string">&#39;SALESMAN&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql数据备份方式-如何恢复-你们的备份策略是什么" tabindex="-1"><a class="header-anchor" href="#mysql数据备份方式-如何恢复-你们的备份策略是什么" aria-hidden="true">#</a> mysql数据备份方式，如何恢复？你们的备份策略是什么？</h3><p><strong>物理完全备份</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>备份所有数据库文件：/var/lib/mysql/*
备份所有binlog文件:  /var/lib/mysql/mysql-bin.*
备份选项文件: /etc/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>mysqldump逻辑备份</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> --all-databases <span class="token operator">&gt;</span> /backup/mysqldump/all.db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>物理备份恢复</strong></p><p>先把原来的数据目录改名</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> /var/lib/mysql /var/lib/mysql.old  
<span class="token function">cp</span> <span class="token parameter variable">-a</span> /backups/mysql /var/lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>逻辑备份数据恢复</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token operator">&gt;</span> use db_name
mysql <span class="token operator">&gt;</span> <span class="token builtin class-name">source</span> /backup/mysqldump/db_name.db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何配置数据库主从同步-实际工作中是否遇到数据不一致问题-如何解决" tabindex="-1"><a class="header-anchor" href="#如何配置数据库主从同步-实际工作中是否遇到数据不一致问题-如何解决" aria-hidden="true">#</a> 如何配置数据库主从同步，实际工作中是否遇到数据不一致问题？如何解决？</h3><p>为每个服务器配置唯一值的server-id</p><p><strong>主库</strong></p><ul><li>开启binlog日志</li><li>创建主从复制用户</li><li>查看master的状态</li></ul><p><strong>从库</strong></p><ul><li>change master to设置主库信息</li><li>start slave开始复制</li></ul><h3 id="mysql约束有哪些" tabindex="-1"><a class="header-anchor" href="#mysql约束有哪些" aria-hidden="true">#</a> mysql约束有哪些？</h3><ul><li>非空约束</li><li>唯一约束</li><li>主键约束</li><li>外键约束</li></ul><h3 id="二进制日志-binlog-用途" tabindex="-1"><a class="header-anchor" href="#二进制日志-binlog-用途" aria-hidden="true">#</a> 二进制日志（binlog）用途？</h3><p>BINLOG记录数据库的变更过程。例如创建数据库、建表、修改表等DDL操作、以及数据表的相关DML操作， 这些操作会导致数据库产生变化，开启binlog以后导致数据库产生变化的操作会按照时间顺序以<code>事件</code> 的形式记录到binlog二进制文件中。</p><h3 id="mysql数据引擎有哪些" tabindex="-1"><a class="header-anchor" href="#mysql数据引擎有哪些" aria-hidden="true">#</a> mysql数据引擎有哪些？</h3><p><strong>myisam、innodb 区别</strong></p><ul><li>InnoDB：支持事务、外键、行锁，是聚族索引，不存储表的行数， 如 <code>select count() from table</code> 时，InnoDB 需要扫描一遍整个表来计算有多少行， 但是 MyISAM 只要简单的读出保存好的行数即可； 注意的是，当 <code>count()</code> 语句包含 where 条件时 MyISAM 也需要扫描整个表； 适合频繁修改以及涉及到安全性较高的应用。</li><li>MylSAM：不支持事务、外键；支持行锁，是非聚族索引，存储表的行数。适合查询以及插入为主的应用。</li><li>清空整个表时，InnoDB 是一行一行的删除，效率非常慢。MyISAM 则会重建表。</li><li>InnoDB 支持行锁（某些情况下还是锁整表，如 <code>update table set a=1 where user like ‘%lee%’</code>。</li></ul><h3 id="引发索引失效问题" tabindex="-1"><a class="header-anchor" href="#引发索引失效问题" aria-hidden="true">#</a> 引发索引失效问题</h3>`,58),M={href:"https://blog.csdn.net/sy_white/article/details/122112440",target:"_blank",rel:"noopener noreferrer"},O=i(`<ul><li>查询条件中带有or,除非所有的查询条件都建有索引，否则索引失效。</li><li>like查询是以%开头。</li><li>如果列类型是字符串，那在查询条件中需要将数据用引号引用起来，否则不走索引。</li><li>索引列上参与计算会导致索引失效。</li><li>违背最左匹配原则。</li></ul><h3 id="如何查询mysql数据库存放路径" tabindex="-1"><a class="header-anchor" href="#如何查询mysql数据库存放路径" aria-hidden="true">#</a> 如何查询mysql数据库存放路径？</h3><p>myisam</p><ul><li>.frm：保护表的定义</li><li>.myd：保存表的数据</li><li>.myi：表的索引文件</li></ul><h3 id="mysql数据库文件后缀名有哪些-用途什么" tabindex="-1"><a class="header-anchor" href="#mysql数据库文件后缀名有哪些-用途什么" aria-hidden="true">#</a> mysql数据库文件后缀名有哪些？用途什么？</h3><p><strong>myisam</strong></p><ul><li>.frm：保护表的定义</li><li>.myd：保存表的数据</li><li>.myi：表的索引文件</li></ul><p><strong>innodb</strong></p><ul><li>.frm：保存表的定义</li><li>.ibd：表空间</li></ul><h3 id="如何修改数据库用户的密码" tabindex="-1"><a class="header-anchor" href="#如何修改数据库用户的密码" aria-hidden="true">#</a> 如何修改数据库用户的密码？</h3><p><strong>mysql8之前</strong></p><ul><li><code>set password for 用户名@localhost = password(&#39;新密码&#39;); </code></li><li><code>mysqladmin -u用户名 -p旧密码 password 新密码</code></li><li><code>update user set password=password(&#39;123&#39;) where user=&#39;root&#39; and host=&#39;localhost&#39;;</code></li></ul><p><strong>mysql8之后</strong></p><ul><li>mysql8初始对密码要求高，简单的字符串不让改。先改成:MyNewPass@123;</li><li><code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;MyNewPass@123&#39;;</code></li></ul><p><em>降低密码难度</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password.policy</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password.length</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>修改成简易密码</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>alter user <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;localhost&#39;</span>IDENTIFIED BY <span class="token string">&#39;1111&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如何修改用户权限-如何查看" tabindex="-1"><a class="header-anchor" href="#如何修改用户权限-如何查看" aria-hidden="true">#</a> 如何修改用户权限？如何查看？</h3><p>授权：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>grant all on *.* to user@<span class="token string">&#39;%&#39;</span> identified by <span class="token string">&#39;passwd&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>show grants <span class="token keyword">for</span> user@<span class="token string">&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三、nosql" tabindex="-1"><a class="header-anchor" href="#三、nosql" aria-hidden="true">#</a> 三、nosql</h2><h3 id="redis数据持久化有哪些方式" tabindex="-1"><a class="header-anchor" href="#redis数据持久化有哪些方式" aria-hidden="true">#</a> redis数据持久化有哪些方式？</h3><ul><li>rdb</li><li>aof</li></ul><h3 id="redis集群方案有哪些" tabindex="-1"><a class="header-anchor" href="#redis集群方案有哪些" aria-hidden="true">#</a> redis集群方案有哪些？</h3><ul><li>官方cluster方案</li><li>twemproxy代理方案</li><li>哨兵模式</li><li>codis</li><li>客户端分片</li></ul><h3 id="redis如何进行数据备份与恢复" tabindex="-1"><a class="header-anchor" href="#redis如何进行数据备份与恢复" aria-hidden="true">#</a> redis如何进行数据备份与恢复？</h3><p>备份</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SAVE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>创建 redis 备份文件也可以使用命令 BGSAVE，该命令在后台执行。</p></blockquote><p>还原</p><blockquote><p>只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> CONFIG GET <span class="token function">dir</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="mongodb如何进行数据备份" tabindex="-1"><a class="header-anchor" href="#mongodb如何进行数据备份" aria-hidden="true">#</a> MongoDB如何进行数据备份？</h3><p><code>mongoexport / mongoimport</code></p><p><code>mongodump / mongorestore</code></p><h3 id="kafka为何比redis-rabbitmq快" tabindex="-1"><a class="header-anchor" href="#kafka为何比redis-rabbitmq快" aria-hidden="true">#</a> kafka为何比redis rabbitmq快？</h3>`,39),A={href:"https://www.zhihu.com/question/22480085",target:"_blank",rel:"noopener noreferrer"},T=i('<h2 id="四、docker" tabindex="-1"><a class="header-anchor" href="#四、docker" aria-hidden="true">#</a> 四、docker</h2><h3 id="dockerfile有哪些关键字-用途是什么" tabindex="-1"><a class="header-anchor" href="#dockerfile有哪些关键字-用途是什么" aria-hidden="true">#</a> dockerfile有哪些关键字？用途是什么？</h3><p><img src="'+b+'" alt=""></p><h3 id="如何减小dockerfile生成镜像体积" tabindex="-1"><a class="header-anchor" href="#如何减小dockerfile生成镜像体积" aria-hidden="true">#</a> 如何减小dockerfile生成镜像体积？</h3><ul><li>尽量选取满足需求但较小的基础系统镜像，例如大部分时候可以选择debian:wheezy或debian:jessie镜像，仅有不足百兆大小；</li><li>清理编译生成文件、安装包的缓存等临时文件；</li><li>安装各个软件时候要指定准确的版本号，并避免引入不需要的依赖；</li><li>从安全角度考虑，应用要尽量使用系统的库和依赖；</li><li>如果安装应用时候需要配置一些特殊的环境变量，在安装后要还原不需要保持的变量值；</li></ul><h3 id="dockerfile中cmd与entrypoint区别是什么" tabindex="-1"><a class="header-anchor" href="#dockerfile中cmd与entrypoint区别是什么" aria-hidden="true">#</a> dockerfile中CMD与ENTRYPOINT区别是什么？</h3><ul><li>CMD 和 ENTRYPOINT 指令都是用来指定容器启动时运行的命令。</li><li>指定 ENTRYPOINT 指令为 exec 模式时，CMD指定的参数会作为参数添加到 ENTRYPOINT 指定命令的参数列表中。</li></ul><h3 id="dockerfile中copy和add区别是什么" tabindex="-1"><a class="header-anchor" href="#dockerfile中copy和add区别是什么" aria-hidden="true">#</a> dockerfile中COPY和ADD区别是什么？</h3><ul><li>COPY指令和ADD指令都可以将主机上的资源复制或加入到容器镜像中</li><li>区别是ADD可以从 远程URL中的资源不会被解压缩。</li><li>如果是本地的压缩包ADD进去会被解压缩</li></ul><h3 id="docker的cs架构组件有哪些" tabindex="-1"><a class="header-anchor" href="#docker的cs架构组件有哪些" aria-hidden="true">#</a> docker的cs架构组件有哪些？</h3><p><img src="'+m+`" alt=""></p><h3 id="docker网络类型有哪些" tabindex="-1"><a class="header-anchor" href="#docker网络类型有哪些" aria-hidden="true">#</a> docker网络类型有哪些？</h3><ul><li>host模式</li><li>container模式</li><li>none模式</li><li>bridge模式</li></ul><h3 id="如何配置docker远程访问" tabindex="-1"><a class="header-anchor" href="#如何配置docker远程访问" aria-hidden="true">#</a> 如何配置docker远程访问？</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /lib/systemd/system/docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在ExecStart=后添加配置，注意，需要先空格后，再输入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-H</span> tcp://0.0.0.0:2375 <span class="token parameter variable">-H</span> unix:///var/run/docker.sock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="docker核心namespace-cgroups-联合文件系统功能是什么" tabindex="-1"><a class="header-anchor" href="#docker核心namespace-cgroups-联合文件系统功能是什么" aria-hidden="true">#</a> docker核心namespace CGroups 联合文件系统功能是什么？</h3><ul><li>namespace：资源隔离</li><li>cgroup：资源控制</li><li>联合文件系统：支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下</li></ul><h3 id="导入导出镜像-进入容器-设置重启容器策略-查看镜像环境变量-查看容器占用资源" tabindex="-1"><a class="header-anchor" href="#导入导出镜像-进入容器-设置重启容器策略-查看镜像环境变量-查看容器占用资源" aria-hidden="true">#</a> 导入导出镜像，进入容器，设置重启容器策略，查看镜像环境变量，查看容器占用资源</h3><ul><li>导入镜像 <code>docker load -i xx.tar</code></li><li>导出镜像 <code>docker save -o xx.tar image_name</code></li><li>进入容器 <code>docker exec -it 容器ID /bin/bash</code></li><li>设置容器重启策略启动时 <code>--restart</code> 选项</li><li>查看容器环境变量 <code>docker exec {containerID} env</code></li><li>查看容器资源占用 <code>docker stats test2</code></li></ul><h3 id="构建镜像有哪些方式" tabindex="-1"><a class="header-anchor" href="#构建镜像有哪些方式" aria-hidden="true">#</a> 构建镜像有哪些方式？</h3><ul><li>dockerfile：<code>docker build -f 文件</code></li><li>容器提交为镜像： <code>docker commit -m &quot;&quot; -a &quot;&quot; 容器ID 镜像名称:版本</code></li></ul><h3 id="docker和vmware虚拟化区别" tabindex="-1"><a class="header-anchor" href="#docker和vmware虚拟化区别" aria-hidden="true">#</a> docker和vmware虚拟化区别？</h3><p><img src="`+g+'" alt=""></p><h2 id="五、kubernetes" tabindex="-1"><a class="header-anchor" href="#五、kubernetes" aria-hidden="true">#</a> 五、kubernetes</h2><h3 id="k8s的集群组件有哪些-功能是什么" tabindex="-1"><a class="header-anchor" href="#k8s的集群组件有哪些-功能是什么" aria-hidden="true">#</a> k8s的集群组件有哪些？功能是什么？</h3><p><img src="'+v+`" alt=""></p><h3 id="kubectl命令相关-如何修改副本数-如何滚动更新和回滚-如何查看pod的详细信息-如何进入pod交互" tabindex="-1"><a class="header-anchor" href="#kubectl命令相关-如何修改副本数-如何滚动更新和回滚-如何查看pod的详细信息-如何进入pod交互" aria-hidden="true">#</a> kubectl命令相关：如何修改副本数，如何滚动更新和回滚，如何查看pod的详细信息，如何进入pod交互？</h3><ul><li><em>修改副本数</em></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl scale deployment redis <span class="token parameter variable">--replicas</span><span class="token operator">=</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><em>活动更新</em></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token builtin class-name">set</span> image deployments myapp-deploy <span class="token assign-left variable">myapp</span><span class="token operator">=</span>myapp:v2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><em>回滚</em></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl rollout undo deployments myapp-deploy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><em>查看pod详细信息</em></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl describe pods/<span class="token operator">&lt;</span>pod-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><em>进入pod交互</em></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>pod-name<span class="token operator">&gt;</span> <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>container-name<span class="token operator">&gt;</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="etcd数据如何备份" tabindex="-1"><a class="header-anchor" href="#etcd数据如何备份" aria-hidden="true">#</a> etcd数据如何备份？</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>etcdctl <span class="token parameter variable">--endpoints</span><span class="token operator">=</span>“https://192.168.32.129:2379,https://192.168.32.130:2379,192.168.32.128:2379”
<span class="token parameter variable">--cacert</span><span class="token operator">=</span>/etc/kubernetes/cert/ca.pem <span class="token parameter variable">--key</span><span class="token operator">=</span>/etc/etcd/cert/etcd-key.pem <span class="token parameter variable">--cert</span><span class="token operator">=</span>/etc/etcd/cert/etcd.pem snapshot save
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>snashot1.dbSnapshot saved at snashot1.db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="k8s控制器有哪些" tabindex="-1"><a class="header-anchor" href="#k8s控制器有哪些" aria-hidden="true">#</a> k8s控制器有哪些？</h3><ul><li>副本集（ReplicaSet）</li><li>部署（Deployment）</li><li>状态集（StatefulSet）</li><li>Daemon集（DaemonSet）</li><li>一次任务（Job）</li><li>计划任务（CronJob）</li><li>有状态集（StatefulSet）</li></ul><h3 id="哪些是集群级别的资源" tabindex="-1"><a class="header-anchor" href="#哪些是集群级别的资源" aria-hidden="true">#</a> 哪些是集群级别的资源？</h3><ul><li>Namespace</li><li>Node</li><li>Role</li><li>ClusterRole</li><li>RoleBinding</li><li>ClusterRoleBinding</li></ul><h3 id="pod状态有哪些" tabindex="-1"><a class="header-anchor" href="#pod状态有哪些" aria-hidden="true">#</a> pod状态有哪些？</h3><ul><li>Pending 等待中</li><li>Running 运行中</li><li>Succeeded 正常终止</li><li>Failed 异常停止</li><li>Unkonwn 未知状态</li></ul><h3 id="pod创建过程是什么" tabindex="-1"><a class="header-anchor" href="#pod创建过程是什么" aria-hidden="true">#</a> pod创建过程是什么？</h3><p><img src="`+k+'" alt=""></p><h3 id="pod重启策略有哪些" tabindex="-1"><a class="header-anchor" href="#pod重启策略有哪些" aria-hidden="true">#</a> pod重启策略有哪些？</h3><p>Pod的重启策略有3种，默认值为Always。</p><ul><li>Always ：容器失效时，kubelet 自动重启该容器；</li><li>OnFailure ：容器终止运行且退出码不为0时重启；</li><li>Never ：不论状态为何， kubelet 都不重启该容器</li></ul><h3 id="资源探针有哪些" tabindex="-1"><a class="header-anchor" href="#资源探针有哪些" aria-hidden="true">#</a> 资源探针有哪些？</h3><ul><li>ExecAction：在容器中执行一个命令，并根据其返回的状态码进行诊断的操作称为Exec探测，状态码为0表示成功，否则即为不健康状态。</li><li>TCPSocketAction：通过与容器的某TCP端口尝试建立连接进行诊断，端口能够成功打开即为正常，否则为不健康状态。</li><li>HTTPGetAction：通过向容器IP地址的某指定端口的指定path发起HTTP GET请求进行诊断，响应码为2xx或3xx时即为成功，否则为失败。</li></ul><h3 id="requests和limits用途是什么" tabindex="-1"><a class="header-anchor" href="#requests和limits用途是什么" aria-hidden="true">#</a> requests和limits用途是什么？</h3><ul><li><code>requests</code> 属性定义其请求的确保可用值，即容器运行可能用不到这些额度的资源，但用到时必须要确保有如此多的资源可用。</li><li><code>limits</code> 属性则用于限制资源可用的最大值，即硬限制。</li></ul><h3 id="kubeconfig文件包含什么内容-用途是什么" tabindex="-1"><a class="header-anchor" href="#kubeconfig文件包含什么内容-用途是什么" aria-hidden="true">#</a> kubeconfig文件包含什么内容，用途是什么？</h3><p>包含集群参数（CA证书、API Server地址），客户端参数（上面生成的证书和私钥），集群context 信息（集群名称、用户名）。</p><h3 id="rbac中role和clusterrole区别-rolebinding和-clusterrolebinding区别" tabindex="-1"><a class="header-anchor" href="#rbac中role和clusterrole区别-rolebinding和-clusterrolebinding区别" aria-hidden="true">#</a> RBAC中role和clusterrole区别，rolebinding和 clusterrolebinding区别？</h3><ul><li><p>Role 可以定义在一个 namespace 中，如果想要跨 namespace 则可以创建 <code>ClusterRole</code>，<code>ClusterRole</code> 具有与 <code>Role</code> 相同的 权限角色控制能力，不同的是 <code>ClusterRole</code> 是集群级别的。</p></li><li><p>RoleBinding 适用于某个命名空间内授权，而 <code>ClusterRoleBinding</code> 适用于集群范围内的授权。</p></li></ul><h3 id="ipvs为啥比iptables效率高" tabindex="-1"><a class="header-anchor" href="#ipvs为啥比iptables效率高" aria-hidden="true">#</a> ipvs为啥比iptables效率高？</h3><ul><li>IPVS模式与iptables同样基于Netfilter，但是ipvs采用的hash表，iptables采用一条条的规则列表。</li><li>iptables又是为了防火墙设计的，集群数量越多iptables规则就越多，而iptables规则是从上到下匹配，所以效率就越是低下。</li><li>因此当service数量达到一定规模时，hash查表的速度优势就会显现出来，从而提高service的服务性能。</li></ul><h3 id="sc-pv-pvc用途-容器挂载存储整个流程是什么" tabindex="-1"><a class="header-anchor" href="#sc-pv-pvc用途-容器挂载存储整个流程是什么" aria-hidden="true">#</a> sc pv pvc用途，容器挂载存储整个流程是什么？</h3><ul><li>PVC：Pod 想要使用的持久化存储的属性，比如存储的大小、读写权限等。</li><li>PV ：具体的 Volume 的属性， 比如 Volume 的类型、挂载目录、远程存储服务器地址等。</li><li>StorageClass：充当 PV 的模板。并且，只有同属于一个 StorageClass 的 PV 和 PVC，才可以绑定在一起。当然， StorageClass 的另一个重要作用，是指定 PV 的 Provisioner（存储插件）。 这时候，如果你的存储插件支持 <code>Dynamic Provisioning</code> 的话，Kubernetes 就可以自动为你创建 PV 了。</li></ul><p><img src="'+x+'" alt=""></p><h3 id="nginx-ingress的原理本质是什么" tabindex="-1"><a class="header-anchor" href="#nginx-ingress的原理本质是什么" aria-hidden="true">#</a> nginx ingress的原理本质是什么？</h3><ul><li>ngress controller通过和kubernetes api交互，动态的去感知集群中ingress规则变化，</li><li>然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，</li><li>生成一段nginx配置，再写到<code>nginx-ingress-controller</code>的pod里，这个Ingress controller的pod里运行着一个Nginx服务， 控制器会把生成的nginx配置写入<code>/etc/nginx.conf</code>文件中，然后reload 一下使配置生效。以此达到域名分配置和动态更新的问题。</li></ul><h3 id="描述不同node上的pod之间的通信流程" tabindex="-1"><a class="header-anchor" href="#描述不同node上的pod之间的通信流程" aria-hidden="true">#</a> 描述不同node上的Pod之间的通信流程</h3><p><img src="'+f+'" alt=""></p><h3 id="k8s集群节点需要关机维护-需要怎么操作" tabindex="-1"><a class="header-anchor" href="#k8s集群节点需要关机维护-需要怎么操作" aria-hidden="true">#</a> k8s集群节点需要关机维护，需要怎么操作</h3><ul><li>进行pod驱逐：<code>kubelet drain &lt;node_name&gt;</code></li><li>检查node上是否无pod运行，切被驱逐的pod已经在其他节点运行正常</li><li>关机维护</li><li>开机启动相关服务（注意启动顺序）</li><li>解除node节点不可调度：<code>kubectl uncordon node</code></li><li>创建测试pod，并使用节点标签测试节点可以被正常调度</li></ul><h3 id="canal和flannel区别" tabindex="-1"><a class="header-anchor" href="#canal和flannel区别" aria-hidden="true">#</a> canal和flannel区别</h3><ul><li>Flannel（简单、使用居多）：基于Vxlan技术（叠加网络+二层隧道），不支持网络策略。</li><li>Calico（较复杂，使用率少于Flannel）： 也可以支持隧道网络，但是是三层隧道（IPIP），支持网络策略。</li><li>Calico项目既能够独立地为Kubernetes集群提供网络解决方案和网络策略， 也能与flannel结合在一起，由flannel提供网络解决方案，而Calico此时仅用于提供网络策略。</li></ul><h2 id="六、prometheus" tabindex="-1"><a class="header-anchor" href="#六、prometheus" aria-hidden="true">#</a> 六、prometheus</h2><h3 id="prometheus对比zabbix有哪些优势" tabindex="-1"><a class="header-anchor" href="#prometheus对比zabbix有哪些优势" aria-hidden="true">#</a> prometheus对比zabbix有哪些优势？</h3>',76),j={href:"https://blog.csdn.net/wangyiyungw/article/details/85774969",target:"_blank",rel:"noopener noreferrer"},B=i('<h3 id="prometheus组件有哪些-功能是什么" tabindex="-1"><a class="header-anchor" href="#prometheus组件有哪些-功能是什么" aria-hidden="true">#</a> prometheus组件有哪些，功能是什么？</h3><p><img src="'+y+'" alt=""></p><h3 id="指标类型有哪些" tabindex="-1"><a class="header-anchor" href="#指标类型有哪些" aria-hidden="true">#</a> 指标类型有哪些？</h3><ul><li>Counter（计数器）</li><li>Guage（仪表盘）</li><li>Histogram（直方图）</li><li>Summary（摘要）</li></ul><h3 id="在应对上千节点监控时-如何保障性能" tabindex="-1"><a class="header-anchor" href="#在应对上千节点监控时-如何保障性能" aria-hidden="true">#</a> 在应对上千节点监控时，如何保障性能</h3><ul><li>降低采集频率</li><li>缩小历史数据保存天数</li><li>使用集群联邦和远程存储</li></ul><h3 id="简述从添加节点监控到grafana成图的整个流程" tabindex="-1"><a class="header-anchor" href="#简述从添加节点监控到grafana成图的整个流程" aria-hidden="true">#</a> 简述从添加节点监控到grafana成图的整个流程</h3><ul><li>被监控节点安装exporter</li><li>prometheus服务端添加监控项</li><li>查看prometheus web界面——status——targets</li><li>grafana创建图表</li></ul><h3 id="在工作中用到了哪些exporter" tabindex="-1"><a class="header-anchor" href="#在工作中用到了哪些exporter" aria-hidden="true">#</a> 在工作中用到了哪些exporter</h3><ul><li>node-exporter监控linux主机</li><li>cAdvisor监控容器</li><li>MySQLD Exporter监控mysql</li><li>Blackbox Exporter网络探测</li><li>Pushgateway采集自定义指标监控</li><li>process exporter进程监控</li></ul><h2 id="七、elk" tabindex="-1"><a class="header-anchor" href="#七、elk" aria-hidden="true">#</a> 七、ELK</h2><h3 id="elasticsearch的数据如何备份与恢复" tabindex="-1"><a class="header-anchor" href="#elasticsearch的数据如何备份与恢复" aria-hidden="true">#</a> Elasticsearch的数据如何备份与恢复？</h3>',12),F={href:"https://www.cnblogs.com/tcy1/p/13492361.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://blog.csdn.net/moxiaomomo/article/details/78401400?locationNum=8&fps=1",target:"_blank",rel:"noopener noreferrer"},Y=i('<h3 id="你们项目中使用的logstash过滤器插件是什么-实现哪些功能" tabindex="-1"><a class="header-anchor" href="#你们项目中使用的logstash过滤器插件是什么-实现哪些功能" aria-hidden="true">#</a> 你们项目中使用的logstash过滤器插件是什么？实现哪些功能？</h3><ul><li>date 日期解析</li><li>grok 正则匹配解析</li><li>overwrite 写某个字段</li><li>dissect 分隔符解析</li><li>mutate 对字段做处理</li><li>json 解析</li><li>geoip 地理位置解析</li><li>ruby 修改logstash event</li></ul><h3 id="是否用到了filebeat的内置module-用了哪些" tabindex="-1"><a class="header-anchor" href="#是否用到了filebeat的内置module-用了哪些" aria-hidden="true">#</a> 是否用到了filebeat的内置module？用了哪些？</h3><p><img src="'+_+'" alt=""></p><h3 id="elasticsearch分片副本是什么-你们配置的参数是多少" tabindex="-1"><a class="header-anchor" href="#elasticsearch分片副本是什么-你们配置的参数是多少" aria-hidden="true">#</a> elasticsearch分片副本是什么？你们配置的参数是多少？</h3>',5),z={href:"https://juejin.cn/post/6844903862088777736",target:"_blank",rel:"noopener noreferrer"},$=i('<h2 id="八、运维开发" tabindex="-1"><a class="header-anchor" href="#八、运维开发" aria-hidden="true">#</a> 八、运维开发</h2><h3 id="备份系统中所有容器镜像" tabindex="-1"><a class="header-anchor" href="#备份系统中所有容器镜像" aria-hidden="true">#</a> 备份系统中所有容器镜像</h3><p>备份镜像列表</p><h3 id="编写脚本-定时备份某个库-然后压缩-发送异机" tabindex="-1"><a class="header-anchor" href="#编写脚本-定时备份某个库-然后压缩-发送异机" aria-hidden="true">#</a> 编写脚本，定时备份某个库，然后压缩，发送异机</h3><ul><li>公共部分定义函数，如获取时间戳，配置报警接口</li><li>多使用if判断是否存在异常并处理，如数据库大，检测任务是否完成。</li><li>检测生成文件大小是否是空文件</li></ul><h3 id="批量获取所有主机的系统信息" tabindex="-1"><a class="header-anchor" href="#批量获取所有主机的系统信息" aria-hidden="true">#</a> 批量获取所有主机的系统信息</h3><ul><li>使用python的paramiko库，ssh登陆主机执行查询操作</li><li>使用shell脚本批量ssh登陆主机并执行命令</li><li>使用ansible的setup模块获取主机信息</li><li>prometheus的node_exporter收集主机资源信息</li></ul><h3 id="django的mtv模式流程" tabindex="-1"><a class="header-anchor" href="#django的mtv模式流程" aria-hidden="true">#</a> django的mtv模式流程</h3><p><img src="'+w+`" alt=""></p><h3 id="python如何导出、导入环境依赖包" tabindex="-1"><a class="header-anchor" href="#python如何导出、导入环境依赖包" aria-hidden="true">#</a> python如何导出、导入环境依赖包</h3><p><strong>导出环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip freeze <span class="token operator">&gt;&gt;</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>导入环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirement.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="python创建-进入-退出-查看虚拟环境" tabindex="-1"><a class="header-anchor" href="#python创建-进入-退出-查看虚拟环境" aria-hidden="true">#</a> python创建，进入，退出，查看虚拟环境</h3><p><strong>安装软件包</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> virtualenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>检测安装是否成功</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>virtualenv <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>创建虚拟环境cd到要创建虚拟环境的目录</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> github/test/venv/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>创建虚拟环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>virtualenv <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>激活虚拟环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> test/bin/activate<span class="token punctuation">(</span>activate路径<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>退出虚拟环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>deactivate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="flask和django区别-应用场景" tabindex="-1"><a class="header-anchor" href="#flask和django区别-应用场景" aria-hidden="true">#</a> flask和django区别，应用场景</h3><ul><li>Django功能大而全，Flask只包含基本的配置</li><li>Django的一站式解决的思路，能让开发者不用在开发之前就在选择应用的基础设施上花费大量时间。</li><li>Django有模板，表单，路由，认证，基本的数据库管理等等内建功能。与之相反，Flask只是一个内核，默认依赖于两个外部库：</li><li>Jinja2 模板引擎和 Werkzeug WSGI 工具集，其他很多功能都是以扩展的形式进行嵌入使用。</li><li>Flask 比 Django 更灵活用Flask来构建应用之前，选择组件的时候会给开发者带来更多的灵活性， 可能有的应用场景不适合使用一个标准的ORM(Object-Relational Mapping 对象关联映射)，或者需要 与不同的工作流和模板系统交互</li></ul><h3 id="列举常用的git命令" tabindex="-1"><a class="header-anchor" href="#列举常用的git命令" aria-hidden="true">#</a> 列举常用的git命令</h3><ul><li>git init <em>初始化</em></li><li>git config <em>配置</em></li><li>git add <em>添加到本地仓库</em></li><li>git commit <em>提交本地仓库</em></li><li>git branch <em>创建分支</em></li><li>git checkout <em>校验、检查</em></li><li>git tag <em>标签</em></li><li>git push <em>推送</em></li><li>git status <em>查看状态</em></li><li>git log <em>查看日志</em></li></ul><h3 id="git-gitlab-jenkins的ci-cd流程如何配置" tabindex="-1"><a class="header-anchor" href="#git-gitlab-jenkins的ci-cd流程如何配置" aria-hidden="true">#</a> git gitlab jenkins的CI/CD流程如何配置</h3><ul><li>开发者git提交代码至gitlab仓库</li><li>jenkins从gitlab拉取代码，触发镜像构建</li><li>镜像上传至harbor私有仓库</li><li>镜像下载至执行机器</li><li>镜像运行</li></ul><h2 id="九、日常工作" tabindex="-1"><a class="header-anchor" href="#九、日常工作" aria-hidden="true">#</a> 九、日常工作</h2><h3 id="在日常工作中遇到了什么棘手的问题-如何排查" tabindex="-1"><a class="header-anchor" href="#在日常工作中遇到了什么棘手的问题-如何排查" aria-hidden="true">#</a> 在日常工作中遇到了什么棘手的问题，如何排查</h3><ul><li>redis弱口令导致中挖矿病毒，排查，优化</li><li>k8s中开发的程序在用户上传文件时开启进程，未及时关闭，导致节点超出最大进程数</li></ul><h3 id="日常故障处理流程" tabindex="-1"><a class="header-anchor" href="#日常故障处理流程" aria-hidden="true">#</a> 日常故障处理流程</h3><ul><li>查看报警内容，快速定位大致故障主机，服务，影响范围</li><li>告知运维经理故障，并开始排查</li><li>如果需要修改配置文件，重启服务器等操作，告知相关开发人员</li><li>完成故障处理</li></ul><h3 id="修改线上业务配置文件流程" tabindex="-1"><a class="header-anchor" href="#修改线上业务配置文件流程" aria-hidden="true">#</a> 修改线上业务配置文件流程</h3><ul><li>先告知运维经理和业务相关开发人员</li><li>在测试环境测试，并备份之前的配置文件</li><li>测试无误后修改生产环境配置</li><li>观察生产环境是否正常，是否有报警</li><li>完成配置文件更改</li></ul><h3 id="业务pv多少-集群规模多少-怎么保障业务高可用" tabindex="-1"><a class="header-anchor" href="#业务pv多少-集群规模多少-怎么保障业务高可用" aria-hidden="true">#</a> 业务pv多少？集群规模多少？怎么保障业务高可用？</h3><h2 id="十、开放性问题" tabindex="-1"><a class="header-anchor" href="#十、开放性问题" aria-hidden="true">#</a> 十、开放性问题</h2><h3 id="你认为初级运维工程师和高级运维工程师的区别" tabindex="-1"><a class="header-anchor" href="#你认为初级运维工程师和高级运维工程师的区别" aria-hidden="true">#</a> 你认为初级运维工程师和高级运维工程师的区别？</h3><h3 id="你认为未来运维发展方向" tabindex="-1"><a class="header-anchor" href="#你认为未来运维发展方向" aria-hidden="true">#</a> 你认为未来运维发展方向?</h3>`,44);function H(U,J){const n=l("ExternalLinkIcon"),r=l("RouterLink");return d(),o("div",null,[c(" more "),S,e("p",null,[e("a",C,[a("参考地址"),s(n)])]),P,e("p",null,[e("a",I,[a("Centos 6 YUM源"),s(n)])]),e("p",null,[e("a",R,[a("Centos 7 YUM源"),s(n)])]),N,e("p",null,[e("a",D,[a("官方 Centos 6"),s(n)])]),e("p",null,[e("a",L,[a("官方 Centos 7"),s(n)])]),V,e("p",null,[s(r,{to:"/linux/ansible/ansible.html"},{default:p(()=>[a("Ansible 模块实例")]),_:1})]),E,e("p",null,[e("a",M,[a("https://blog.csdn.net/sy_white/article/details/122112440"),s(n)])]),O,e("p",null,[e("a",A,[a("参考"),s(n)])]),T,e("p",null,[e("a",j,[a("参考"),s(n)])]),B,e("p",null,[e("a",F,[a("参考"),s(n)])]),e("p",null,[e("a",G,[a("参考"),s(n)])]),Y,e("p",null,[e("a",z,[a("参考"),s(n)])]),$])}const X=t(q,[["render",H],["__file","linux.html.vue"]]);export{X as default};
